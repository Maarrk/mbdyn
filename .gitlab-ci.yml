# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

## FIXME: workflow rules are causing troubles with git pull
# workflow:
#   rules:
#     - if: $CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "master"
#       when: always
#     - if: $CI_PIPELINE_SOURCE == "merge_request_event"
#       when: always
#     - when: never

variables:
  ## Directories for binaries and temporary storage:
  ## All paths must be relative to $CI_PROJECT_DIR!
  ## So, we can use them with "artifacts:" and "cache:".
  ## Regarding artifacts, every build stage should have one directory of it's own!
  ## By default, the content of those directories will be lost after each job ends.
  ## The only exception is MKL, because it is too big for "artifacts:" and "cache:"
  TESTSUITE_PREFIX: testsuite/var

  ## All the job artefacts are stored inside $TESTSUITE_PREFIX_CACHE.
  ## They will be cleaned up after each job, but the can be restored by indiviual jobs using "needs:"
  TESTSUITE_PREFIX_CACHE: $TESTSUITE_PREFIX/cache

  ## Temporary files are store inside $TESTSUITE_PREFIX_TMP and will be cleaned up after each job,
  ## unless they are cached by individual jobs.
  TESTSUITE_PREFIX_TMP: $TESTSUITE_PREFIX/tmp

  ## Compiled object files are stored inside $TESTSUITE_PREFIX_BUILD
  ## Those directories may be cached by individual jobs in order to speed up compilation.
  TESTSUITE_PREFIX_BUILD: $TESTSUITE_PREFIX_TMP/build

  ## Local installation directory for MBDyn:
  MBD_INSTALL_PREFIX: $TESTSUITE_PREFIX_CACHE/mbdyn

  ## Local installation directory for Gmsh:
  GMSH_INSTALL_PREFIX: $TESTSUITE_PREFIX_CACHE/gmsh

  ## Local installation directory for fem_pre_mesh_size
  ## This program is needed to calculate the mesh size for Gmsh only for a very specific test case.
  OCT_PKG_INSTALL_PREFIX: $TESTSUITE_PREFIX_CACHE/share/octave

  ## Local installation directory for Intel oneMKL
  ## FIXME: MKL cannot be used as an artifact because it is too big!
  ## FIMXE: So, $MKL_INSTALL_PREFIX is relative to $HOME instead of CI_PROJECT_DIR
  MKL_INSTALL_PREFIX: $TESTSUITE_PREFIX_CACHE/mkl

  ## Local installation directory for NetCDF
  NC_INSTALL_PREFIX: $TESTSUITE_PREFIX_CACHE/netcdf

  ## Local installation directory for NetCDF
  NC_CXX4_INSTALL_PREFIX: $TESTSUITE_PREFIX_CACHE/netcdf-cxx4

  ## Local installation directory for nlopt
  NL_INSTALL_PREFIX: $TESTSUITE_PREFIX_CACHE/nlopt

  ## Local build directories
  ## They must be relative to $CI_PROJECT_DIR, so we can use them with "cache:"

  ## If you want to free disk space at the runner, go to
  ## "https://public.gitlab.polimi.it/DAER/mbdyn/-/pipelines"
  ## and select "Clear runner caches"!
  MBD_BUILD_DIR: $TESTSUITE_PREFIX_BUILD/mbdyn
  MBD_BUILD_DIR_MANUALS: $TESTSUITE_PREFIX_BUILD/mbdyn-manuals

  NC_C_BUILD_DIR: $TESTSUITE_PREFIX_BUILD/netcdf-c
  NC_CXX4_BUILD_DIR: $TESTSUITE_PREFIX_BUILD/netcdf-cxx4

  NL_BUILD_DIR: $TESTSUITE_PREFIX_BUILD/nlopt

  GMSH_BUILD_DIR: $TESTSUITE_PREFIX_BUILD/gmsh

  OCT_PKG_BUILD_DIR: $TESTSUITE_PREFIX_BUILD/octave-pkg

  ## FIXME: MKL cannot be used as cache because it is too big!
  ## FIXME: So, $MKL_BUILD_DIR is relative to $HOME instead of $CI_PROJECT_DIR
  MKL_BUILD_DIR: $TESTSUITE_PREFIX_BUILD/mkl

  MBD_TESTS_PUBLIC_INPUT_DIR: $TESTSUITE_PREFIX_CACHE/mbdyn-tests-public
  MBD_TESTS_PRIVATE_INPUT_DIR: $TESTSUITE_PREFIX_CACHE/mbdyn-tests-private

  # Number of processes to build MBDyn (e.g. make -j$MBD_NUM_BUILD_JOBS)
  MBD_NUM_BUILD_JOBS: "12"

  ## Remove and reinstall all the software which was installed by previous pipeline executions.
  MBD_CLEAN_ALL: "no"

  ## Compiler flags for MBDyn and mboct-*-pkg
  MBD_COMPILER_FLAGS: "-Ofast -Wall -march=native -mtune=native -Wno-unused-variable"

  ## Octave packages to be installed from github.com or octave-forge
  ## List of package names separated by space: <OCTAVE_PKG_NAME>:<REBUILD_FLAG>:<BRANCH_TAG>:<TEST_FLAG>:<TEST_TIMEOUT>
  ## <OCTAVE_PKG_NAME> Name of the package which will be passed to Octave's pkg load function (e.g. pkg("load","<OCTAVE_PKG_NAME>"))
  ## <REBUILD_FLAG>    If this value is set to "yes", the package will be reinstalled. Otherwise the package may be reused from the cache.
  ## <BRANCH_TAG>      Name of the branch (e.g. git clone -b <BRANCH_TAG>). In case of packages from octave-forge, this value will be ignored.
  ## <TEST_FLAG>       If this value is set to "yes", Octave's __run_test_suite__ or test function will be executed in octave-pkg-test-job.
  ## <TEST_TIMEOUT>    Timeout for test execution in seconds, minutes or hours (e.g. "3600s", "60m", "1h" or "unlimited")
  ##                   There should be no need to enable a timeout here.
  OCT_PKG_LIST: "nurbs:yes:master:yes:unlimited netcdf:yes:master:yes:unlimited mboct-octave-pkg:no:master:yes:unlimited mboct-numerical-pkg:no:master:yes:unlimited mboct-mbdyn-pkg:no:master:yes:unlimited mboct-fem-pkg:no:master:no:unlimited"

  ## Execution mode for all Octave package tests:
  ## In "single" mode, Octave will be launched for each function and Octave's "test" function will be executed.
  ## The value of <TEST_TIMEOUT> will be applied to each function.
  ## In "pkg" mode, Octave will be launched only once for each package and Octave's "__run_test_suite__" function will be executed.
  ## The value <TEST_TIMEOUT> will be applied to the whole package.
  OCT_PKG_TEST_MODE: "single"
  OCTAVE_EXEC: "octave"

  ## Temorary directory for all Octave package tests (e.g. TMPDIR will be redirected)
  ## This makes it easier to clean up temporary files and ther is no need to use /tmp
  ## Paths must be relative to CI_PROJECT_PATH
  TESTSUITE_PREFIX_TESTS: $TESTSUITE_PREFIX_TMP/tests/
  OCT_PKG_TEST_OUTPUT_DIR: $TESTSUITE_PREFIX_TESTS/octave-pkg-testjob/
  MBD_MODULE_TESTS_OUTPUT_DIR: $TESTSUITE_PREFIX_TESTS/mbdyn-modules-testjob/
  MBD_TESTS_PUBLIC_OUTPUT_DIR: $TESTSUITE_PREFIX_TESTS/mbdyn-tests-public-testjob/
  MBD_TESTS_PRIVATE_OUTPUT_DIR: $TESTSUITE_PREFIX_TESTS/mbdyn-tests-private-testjob/

  MKL_PKG_CONFIG: "mkl-dynamic-lp64-gomp" ## MKL pkg-config file without extension (e.g. use "${MKL_PKG_CONFIG}.pc")

  ## Additional arguments to be passed to simple_testsuite.sh
  ## See simple_testsuite.sh --help
  ## In order to enable verbose output for MBDyn use: MBD_SIMPLE_TESTSUITE_FLAGS: "--verbose yes"
  MBD_SIMPLE_TESTSUITE_FLAGS: ""
stages:          # List of stages for jobs, and their order of execution
  - .pre
  - build
  - test
  - deploy
  - .post

include:
    - local: '/testsuite/mbdyn-cleanup-job.yml'
    - local: '/testsuite/mbdyn-bootloader-job.yml'
    - local: '/testsuite/mbdyn-checkout-job.yml'
    - local: '/testsuite/mkl-build-job.yml'
    - local: '/testsuite/netcdf-build-job.yml'
    - local: '/testsuite/nlopt-build-job.yml'
    - local: '/testsuite/mbdyn-build-job.yml'
    - local: '/testsuite/octave-pkg-build-job.yml'
    - local: '/testsuite/gmsh-build-job.yml'
    - local: '/testsuite/octave-pkg-test-job.yml'
    - local: '/testsuite/mbdyn-tests-private-test-job.yml'
    - local: '/testsuite/mbdyn-tests-public-test-job.yml'
    - local: '/testsuite/mbdyn-modules-test-job.yml'
    - local: '/testsuite/mbdyn-deploy-job.yml'
    - local: '/testsuite/mbdyn-testsuite-report-job.yml'
