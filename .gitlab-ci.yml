# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

## FIXME: workflow rules are causing troubles with git pull
# workflow:
#   rules:
#     - if: $CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "master"
#       when: always
#     - if: $CI_PIPELINE_SOURCE == "merge_request_event"
#       when: always
#     - when: never

variables:
  ## Installation directories - they should be relative to $CI_PROJECT_DIR
  ## Then we could use it as "artifacts"
  ## Every build stage needs one directory of it's own!

  ## Local installation directory for MBDyn:
  MBD_INSTALL_PREFIX: "testsuite/var/cache/mbdyn/"

  ## Local installation directory for Gmsh:
  GMSH_INSTALL_PREFIX: "testsuite/var/cache/gmsh/"

  ## Local installation directory for fem_pre_mesh_size
  ## This program is needed to calculate the mesh size for Gmsh only for a very specific test case.
  OCT_PKG_INSTALL_PREFIX: "testsuite/var/cache/share/octave/"

  ## Local installation directory for Intel oneMKL
  MKL_INSTALL_PREFIX: "testsuite/var/cache/mkl/"

  ## Local installation directory for NetCDF
  NC_INSTALL_PREFIX: "testsuite/var/cache/netcdf/"

  ## Local installation directory for NetCDF
  NC_CXX4_INSTALL_PREFIX: "testsuite/var/cache/netcdf-cxx4/"

  ## Local installation directory for nlopt
  NL_INSTALL_PREFIX: "testsuite/var/cache/nlopt/"

  ## Local build directory for MBDyn
  ## Will be cleaned only if MBD_CLEAN_BUILD=yes or MBD_CLEAN_ALL=yes
  MBD_BUILD_DIR: "testsuite/var/tmp/build/mbdyn/"

  NC_C_BUILD_DIR: "testsuite/var/tmp/build/netcdf-c/"
  NC_CXX_BUILD_DIR: "testsuite/var/tmp/build/netcdf-cxx4/"

  NL_BUILD_DIR: "testsuite/var/tmp/build/nlopt/"

  GMSH_BUILD_DIR: "testsuite/var/tmp/build/gmsh/"

  OCT_PKG_BUILD_DIR: "testsuite/var/tmp/build/octave-pkg/"

  MKL_BUILD_DIR: "testsuite/var/tmp/build/mkl/"

  MBD_TESTS_PUBLIC_INPUT_DIR: "testsuite/var/cache/mbdyn-tests-public/"
  MBD_TESTS_PRIVATE_INPUT_DIR: "testsuite/var/cache/mbdyn-tests-private/"

  ## Clean up the build directory of MBDyn
  MBD_CLEAN_BUILD: "no"

  # Number of processes to build MBDyn (e.g. make -j$MBD_NUM_BUILD_JOBS)
  MBD_NUM_BUILD_JOBS: "12"

  ## Remove and reinstall all the software which was installed by previous pipeline executions.
  MBD_CLEAN_ALL: "no"

  ## Force no rebuild of MBDyn; The default must be "no", but it could be overridden manually when the pipeline is started!
  MBD_SKIP_BUILD: "no"

  ## Install the latest stable release of Gmsh via wget
  GMSH_URL: "http://www.gmsh.info/bin/Linux/gmsh-stable-Linux64.tgz"

  ## Force reinstallation of a new version of Gmsh from $GMSH_URL
  ## The default value should be "no", but may be overridden manually when the pipeline is started.
  GMSH_REINSTALL: "no"

  ## Compiler flags for MBDyn and mboct-*-pkg
  MBD_COMPILER_FLAGS: "-Ofast -Wall -march=native -mtune=native -Wno-unused-variable"

  ## Run MBDyn's configure with the following modules enabled.
  ## In order to enable additional modules, it would be necessary also to install their dependencies.
  MBD_WITH_MODULE: "fabricate damper-gandhi pid hfelem fab-electric template2 cont-contact wheel4 mds indvel mcp_test1 scalarfunc muscles minmaxdrive drive-test loadinc cudatest randdrive imu convtest md autodiff_test rotor-loose-coupling namespace drive controller constlaw fab-sbearings rotor_disc hunt-crossley diff damper-hydraulic cyclocopter fab-motion flightgear hid ns damper-graall"

  ## Octave packages to be installed from github.com or octave-forge
  OCT_PKG_LIST: "nurbs netcdf mboct-octave-pkg mboct-numerical-pkg mboct-mbdyn-pkg mboct-fem-pkg"

  ## Force rebuild of Octave packages to be installed from github.com or octave-forge
  OCT_PKG_REBUILD: "nurbs:no netcdf:no mboct-octave-pkg:no mboct-numerical-pkg:no mboct-mbdyn-pkg:no mboct-fem-pkg:no"

  ## Branch passed to git clone -b for all mboct-*-pkg packages.
  OCT_PKG_BRANCH: "nurbs:master netcdf:master mboct-octave-pkg:master mboct-numerical-pkg:master mboct-mbdyn-pkg:master mboct-fem-pkg:master"

  ## Octave package tests to be executed
  ## Actually only mboct-mbdyn-pkg contains validating tests for MBDyn.
  ## However, the other packages are required to run those tests.
  OCT_PKG_TESTS: "nurbs:no netcdf:no mboct-octave-pkg:no mboct-numerical-pkg:no mboct-mbdyn-pkg:yes mboct-fem-pkg:no"

  ## Timeout for test execution in seconds, minutes or hours (e.g. "3600s", "60m", "1h" or "unlimited")
  ## There should be no need to enable a timeout here.
  OCT_PKG_TIMEOUT: "nurbs:unlimited netcdf:unlimited mboct-octave-pkg:unlimited mboct-numerical-pkg:unlimited mboct-mbdyn-pkg:unlimited mboct-fem-pkg:unlimited"

  ## Temorary directory for all Octave package tests (e.g. TMPDIR will be redirected)
  ## This makes it easier to clean up temporary files and ther is no need to use /tmp
  OCT_PKG_TEST_OUTPUT_DIR: "testsuite/var/tmp/octave-pkg-testjob/"

  ## Execution mode for all Octave package tests:
  ## In "single" mode, Octave will be launched for each function and Octave's "test" function will be executed.
  ## The value of $OCT_PKG_TIMEOUT will be applied to each function.
  ## In "pkg" mode, Octave will be launched only once for each package and Octave's "__run_test_suite__" function will be executed.
  ## The value $OCT_PKG_TIMEOUT will be applied to the whole package.
  OCT_PKG_TEST_MODE: "pkg"
  OCTAVE_EXEC: "octave"

  ## Timeout per model (by default in minutes, "s" for seconds, "m" for minutes "h" for hours)
  ## Timeout value should not be "unlimited" if we are testing models which are using sockets, because this might block our pipeline forever!
  MBD_MODULE_TEST_TIMEOUT: "unlimited"
  MBD_TESTS_PUBLIC_TIMEOUT: "unlimited"
  MBD_TESTS_PRIVATE_TIMEOUT: "600s"

  ## Error codes which should not cause the pipeline to fail:
  ## - timeout                    (0x2)
  ## - module not found           (0x4)
  ## - loadable element not found (0x8)
  MBD_MODULE_TEST_EXIT_STATUS_MASK: "0xC"
  MBD_TESTS_PUBLIC_EXIT_STATUS_MASK: "0x0"
  MBD_TESTS_PRIVATE_EXIT_STATUS_MASK: "0xE"

  ## Paths must be relative to CI_PROJECT_PATH
  MBD_MODULE_TEST_OUTPUT_DIR: "testsuite/var/tmp/mbdyn-modules-testjob/"
  MBD_TESTS_PUBLIC_OUTPUT_DIR: "testsuite/var/tmp/mbdyn-tests-public-testjob/"
  MBD_TESTS_PRIVATE_OUTPUT_DIR: "testsuite/var/tmp/mbdyn-tests-private-testjob/"
  MBD_TESTS_PUBLIC_GITLAB: "https://gitlab.com/zanoni-mbdyn/mbdyn-tests-public.git"
  MBD_TESTS_PRIVATE_GITLAB: "git@gitlab.com:zanoni-mbdyn/mbdyn-tests.git"

  ## Additional arguments to be passed to simple_testsuite.sh
  ## See simple_testsuite.sh --help
  ## In order to enable verbose output for MBDyn use: MBD_SIMPLE_TESTSUITE_FLAGS: "--verbose yes"
  MBD_SIMPLE_TESTSUITE_FLAGS: ""

  ## Intel oneMKL - Non free software, but we are allowed to redistribute it, even inside a public docker container!
  ## See https://www.intel.com/content/www/us/en/developer/articles/tool/onemkl-license-faq.html
  MKL_URL: "https://registrationcenter-download.intel.com/akdlm/IRC_NAS/86d6a4c1-c998-4c6b-9fff-ca004e9f7455/"
  MKL_PACKAGE: "l_onemkl_p_2024.0.0.49673.sh"
  MKL_PKG_CONFIG: "mkl-dynamic-lp64-gomp" ## MKL pkg-config file without extension (e.g. use "${MKL_PKG_CONFIG}.pc")

  ## Send a kill -9 to all running octave and mbdyn processes owned by the same user and without a terminal connected.
  ## For whatever reason, it could happen that those processes are not terminated if a pipeline is cancelled.
  ## "no"       Do not start the pipeline if there are any running processes! This option should be safe.
  ## "yes"      Kill all running processes!
  ##            This must not be the default option, and it should be used only as a last resort solution!
  ##            In such a situation just go to "https://public.gitlab.polimi.it/DAER/mbdyn/-/pipelines/new"
  ##            and override the default value by "yes"!
  ## "disabled" Ignore running processes. Probably not a safe option.
  MBD_FORCE_KILL: "no"

stages:          # List of stages for jobs, and their order of execution
  - .pre
  - build
  - test
  - deploy

include:
    - local: '/testsuite/mbdyn-cleanup-job.yml'
    - local: '/testsuite/mkl-build-job.yml'
    - local: '/testsuite/netcdf-build-job.yml'
    - local: '/testsuite/nlopt-build-job.yml'
    - local: '/testsuite/mbdyn-build-job.yml'
    - local: '/testsuite/octave-pkg-build-job.yml'
    - local: '/testsuite/gmsh-build-job.yml'
    - local: '/testsuite/mbdyn-tests-private-test-job.yml'
    - local: '/testsuite/mbdyn-tests-public-test-job.yml'
    - local: '/testsuite/mbdyn-modules-test-job.yml'
    - local: '/testsuite/octave-pkg-test-job.yml'

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
