# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

variables:
  MBD_INSTALL_PREFIX: "/home/gitlab-runner/local/mbdyn-test-install/" ## Local installation directory
  MBD_BUILD_DIR: "/home/gitlab-runner/install/mbdyn-test-build/" ## Local build directory
  MBD_NUM_BUILD_JOBS: "12" # Run make -j '$MBD_NUM_BUILD_JOBS'
  MBD_CLEAN_ALL: "no" ## Should be set to "yes" as soon as the testsuite is finished
  MBD_CLEAN_BUILD: "no" ## Clean up the build directory
  MBD_COMPILER_FLAGS: "-Ofast -Wall -march=native -mtune=native" ## Compiler flags for MBDyn and mboct-*-pkg
  MBOCT_OCTAVE_PKG_BRANCH: "master"
  MBOCT_NUMERICAL_PKG_BRANCH: "master"
  MBOCT_MBDYN_PKG_BRANCH: "master"
  MBOCT_FEM_PKG_BRANCH: "master"
  MBOCT_OCTAVE_PKG_REINSTALL: "no"
  MBOCT_NUMERICAL_PKG_REINSTALL: "no"
  MBOCT_MBDYN_PKG_REINSTALL: "no"
  MBOCT_FEM_PKG_REINSTALL: "no"
  MBD_GMSH_REINSTALL: "no"
  OCT_NETCDF_REINSTALL: "no"
  OCT_NURBS_REINSTALL: "no"
  MBOCT_OCTAVE_PKG_TESTS: "yes"
  MBOCT_NUMERICAL_PKG_TESTS: "yes"
  MBOCT_MBDYN_PKG_TESTS: "yes" ## Should be yes
  MBOCT_FEM_PKG_TESTS: "no"
  OCT_NETCDF_TESTS: "no"
  OCT_NURBS_TESTS: "no"

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

mbdyn-build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    #- echo "Check cpuinfo ..."
    #- cat /proc/cpuinfo
    #- echo "Check the host system ..."
    #- uname -a
    #- find ${HOME} -name config.status -execdir make distclean ';'
    #- echo "Cleanup some garbage ..."
    #- |
    #  for dirent in autom4te.cache build contrib CVS etc include libraries manual mbdyn modules packaging tests utils var; do
     #   if test -d ${HOME}/${dirent}; then
          #find ${HOME}/${dirent} -type f
          #rm -rf ${HOME}/${dirent}
      #  fi
    #  done
    #- echo "Check the contents of the home directory ..."
    #- find ${HOME} -type f # Let us check if we left some garbage there ...
    - printf "checkout branch \"%s\"\n" "$CI_COMMIT_BRANCH"
    - git checkout $CI_COMMIT_BRANCH --force
    - printf "pulling\n"
    - git pull --force
    ## Let's try to speed up the build process a bit
    ## Execute bootstrap.sh and configure only if needed
    ## This conditional execution may be removed as soon as the testsuite is finished
    - |
      if ! test -x ./configure ; then
        chmod u+x ./bootstrap.sh
        ./bootstrap.sh
      fi
      test -x ./configure
    - MBD_SOURCE_DIR=`pwd`
    - echo "Create build directory ..."
    - |
      if test ${MBD_CLEAN_BUILD} = "yes" -o ${MBD_CLEAN_ALL} = "yes"; then
        echo "cleanup build directory ..."
        rm -rf ${MBD_BUILD_DIR}
      fi
    - echo "create build directory ..."
    - if ! test -d ${MBD_BUILD_DIR}; then mkdir -p ${MBD_BUILD_DIR}; fi
    - test -d ${MBD_BUILD_DIR}
    - if ! test -d ${MBD_INSTALL_PREFIX}; then mkdir -p ${MBD_INSTALL_PREFIX}; fi
    - test -d ${MBD_INSTALL_PREFIX}
    - cd ${MBD_BUILD_DIR}
    - echo "Build directory"
    - pwd
    - ls -lhF .
    - printf "configure ...\n"
    - |
      if ! test -f Makefile; then
        if ! PYTHON_VERSION=3 ${MBD_SOURCE_DIR}/configure \
                    CPPFLAGS="-I/usr/include/suitesparse -I/usr/include/trilinos -I/usr/lib64/python3.11/site-packages/numpy/core/include -I/usr/include/python3.11/ -I/usr/include/octave-8.4.0" \
                    CXXFLAGS="${MBD_COMPILER_FLAGS}" \
                    CFLAGS="${MBD_COMPILER_FLAGS}" \
                    FFLAGS="${MBD_COMPILER_FLAGS}" \
                    FCFLAGS="${MBD_COMPILER_FLAGS}" \
                    --enable-python \
                    --enable-octave \
                    --enable-install_test_progs \
                    --prefix=${MBD_INSTALL_PREFIX} \
                    --with-umfpack \
                    --with-klu \
                    --with-suitesparseqr \
                    --with-static-modules \
                    --disable-Werror \
                    --with-trilinos ; then
                    ## FIXME: We should not use --disable-Werror, but need to fix a few warnings caused by Octave's headers instead
                    ## FIXME: Add --enable-netcdf
          echo "Failed to run configure"
          exit 1
        fi
      fi
      test -f Makefile
    - echo "Determine the number of build jobs ..."
    - |
      if test -f /proc/cpuinfo ; then
        MBD_NUM_BUILD_JOBS=`awk 'BEGIN{max=1;}/^processor\>/{if ($3 + 1 >= max) max = $3 + 1; } END{ print max }' /proc/cpuinfo`;
      fi
    - printf "Compiling the code using %s jobs ...\n" ${MBD_NUM_BUILD_JOBS}
    - make -j${MBD_NUM_BUILD_JOBS}
    - echo "Clean up local installation directory"
    - rm -rf ${MBD_INSTALL_PREFIX}
    - printf "Install the code in \"%s\"\n" "${MBD_INSTALL_PREFIX}"
    - make install
    - echo "MBDyn version:"
    - ${MBD_INSTALL_PREFIX}/bin/mbdyn --version
    - echo "Run built-in unit tests"
    - make test

# octave-forge-build-job:       # This job runs in the build stage, which runs first.
#   stage: build
#   script:
#       - echo "octave-forge build"
#       - |

#         if test ${OCT_NURBS_REINSTALL} = "no" -a ${MBD_CLEAN_ALL} = "no"; then
#           if octave --eval 'pl=pkg("list", "nurbs"); exit(isempty(pl))'; then
#             echo "nurbs is already installed"
#             exit 0
#           fi
#         fi
#       - octave-cli --eval "pkg install -verbose -local -forge nurbs"

octave-pkg-build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
      - echo "octave packages installation job"
      - |
          for pkgname in nurbs netcdf mboct-octave-pkg mboct-numerical-pkg mboct-mbdyn-pkg mboct-fem-pkg; do
              printf "build package \"%s\"\n" "${pkgname}"
              case "${pkgname}" in
                  mboct-octave-pkg)
                      mboct_reinstall_flag="${MBOCT_OCTAVE_PKG_REINSTALL}"
                      mboct_branch_tag="${MBOCT_OCTAVE_PKG_BRANCH}"
                      ;;
                  mboct-numerical-pkg)
                      mboct_reinstall_flag="${MBOCT_NUMERICAL_PKG_REINSTALL}"
                      mboct_branch_tag="${MBOCT_NUMERICAL_PKG_BRANCH}"
                      ;;
                  mboct-mbdyn-pkg)
                      mboct_reinstall_flag="${MBOCT_MBDYN_PKG_REINSTALL}"
                      mboct_branch_tag="${MBOCT_MBDYN_PKG_BRANCH}"
                      ;;
                  mboct-fem-pkg)
                      mboct_reinstall_flag="${MBOCT_FEM_PKG_REINSTALL}"
                      mboct_branch_tag="${MBOCT_FEM_PKG_BRANCH}"
                      ;;
                  netcdf)
                      mboct_reinstall_flag="${OCT_NETCDF_REINSTALL}"
                      mboct_branch_tag="forge"
                      ;;
                  nurbs)
                      mboct_reinstall_flag="${OCT_NURBS_REINSTALL}"
                      mboct_branch_tag="forge"
                      ;;
                  *)
                      mboct_reinstall_flag="no"
                      mboct_branch_tag="master"
                      ;;
              esac
              if test "${mboct_reinstall_flag}" = "no" -a "${MBD_CLEAN_ALL}" = "no"; then
                  if octave --eval "pkg load ${pkgname}"; then
                      printf "installation of \"%s\" will be skipped, because the package is already installed\n" "${pkgname}"
                      continue
                  fi
              fi
              case "${pkgname}" in
                  mboct-*-pkg)
                      if ! git clone -b "${mboct_branch_tag}" "https://github.com/octave-user/${pkgname}.git"; then
                          printf "failed to clone package \"%s\" from github.com\n" "${pkgname}"
                          exit 1
                      fi
                      if ! make CXXFLAGS="${MBD_COMPILER_FLAGS}" -C "${pkgname}" install_local; then
                          printf "failed to build package \"%s\"\n" "${pkgname}"
                      fi
                      ;;
                  *)
                      # Assume that the package is hosted at octave-forge
                      if ! octave-cli --eval "pkg install -verbose -local -forge ${pkgname}"; then
                          printf "failed to install package \"%s\" from octave-forge\n" "${pkgname}"
                          exit 1
                      fi
                      ;;
              esac

              if octave --eval "pkg load ${pkgname}"; then
                  printf "package \"%s\" was loaded successfully\n" "${pkgname}"
              else
                  printf "failed to load package \"%s\"\n" "${pkgname}"
              fi
          done

# mboct-octave-pkg-build-job:       # This job runs in the build stage, which runs first.
#   stage: build
#   script:
#       - echo "mboct-octave-pkg build"
#       - |
#         if test ${MBOCT_OCTAVE_PKG_REINSTALL} = "no" -a ${MBD_CLEAN_ALL} = "no"; then
#           if octave --eval 'pl=pkg("list", "mboct-octave-pkg"); exit(isempty(pl))'; then
#             echo "mboct-octave-pkg is already installed"
#             exit 0
#           fi
#         fi
#       - git clone -b ${MBOCT_OCTAVE_PKG_BRANCH} https://github.com/octave-user/mboct-octave-pkg.git
#       - make CXXFLAGS="${MBD_COMPILER_FLAGS}" -C mboct-octave-pkg install_local

# mboct-numerical-pkg-build-job:       # This job runs in the build stage, which runs first.
#   stage: build
#   script:
#       - echo "mboct-numerical-pkg build"
#       - |
#         if test ${MBOCT_NUMERICAL_PKG_REINSTALL} = "no" -a ${MBD_CLEAN_ALL} = "no"; then
#           if octave --eval 'pl=pkg("list", "mboct-numerical-pkg"); exit(isempty(pl))'; then
#             echo "mboct-numerical-pkg is already installed"
#             exit 0
#           fi
#         fi
#       - git clone -b ${MBOCT_NUMERICAL_PKG_BRANCH} https://github.com/octave-user/mboct-numerical-pkg.git
#       - make CXXFLAGS="${MBD_COMPILER_FLAGS}" -C mboct-numerical-pkg install_local

# nurbs-build-job:       # This job runs in the build stage, which runs first.
#   stage: build
#   script:
#       - echo "nurbs build"
#       - |
#         if test ${OCT_NURBS_REINSTALL} = "no" -a ${MBD_CLEAN_ALL} = "no"; then
#           if octave --eval 'pl=pkg("list", "nurbs"); exit(isempty(pl))'; then
#             echo "nurbs is already installed"
#             exit 0
#           fi
#         fi
#       - octave-cli --eval "pkg install -verbose -local -forge nurbs"

# netcdf-build-job:       # This job runs in the build stage, which runs first.
#   stage: build
#   script:
#       - echo "netcdf build"
#       - |
#         if test ${OCT_NETCDF_REINSTALL} = "no" -a ${MBD_CLEAN_ALL} = "no"; then
#           if octave --eval 'pl=pkg("list", "netcdf"); exit(isempty(pl))'; then
#             echo "netcdf is already installed"
#             exit 0
#           fi
#         fi
#       - octave-cli --eval "pkg install -verbose -local -forge netcdf"

# mboct-mbdyn-pkg-build-job:       # This job runs in the build stage, which runs first.
#   stage: build
#   script:
#       - |
#         if test ${MBOCT_MBDYN_PKG_REINSTALL} = "no" -a ${MBD_CLEAN_ALL} = "no"; then
#           if octave --eval 'pl=pkg("list", "mboct-mbdyn-pkg"); exit(isempty(pl))'; then
#             echo "mboct-mbdyn-pkg is already installed"
#             exit 0
#           fi
#         fi
#       - git clone -b ${MBOCT_MBDYN_PKG_BRANCH} https://github.com/octave-user/mboct-mbdyn-pkg.git
#       - make CXXFLAGS="${MBD_COMPILER_FLAGS}" -C mboct-mbdyn-pkg install_local

gmsh-build-job:       # This job runs in the build stage, which runs first.
   stage: build
   script:
       - echo "gmsh build"
       - |
         export PATH=${MBD_INSTALL_PREFIX}/bin:${PATH}
         if gmsh --version >& /dev/null && test ${MBD_GMSH_REINSTALL} = "no" -a ${MBD_CLEAN_ALL} = "no" ; then
           echo "Gmsh was already installed ..."
           exit 0
         fi
       - wget http://www.gmsh.info/bin/Linux/gmsh-stable-Linux64.tgz
       - tar -zxvf gmsh-stable-Linux64.tgz
       - install gmsh-*.*.*-Linux64/bin/gmsh ${MBD_INSTALL_PREFIX}/bin
       - ${MBD_INSTALL_PREFIX}/bin/gmsh --version

# mboct-fem-pkg-build-job:       # This job runs in the build stage, which runs first.
#   stage: build
#   script:
#       - echo "mboct-fem-pkg build"
#       - |
#         if test ${MBOCT_FEM_PKG_REINSTALL} = "no" -a ${MBD_CLEAN_ALL} = "no"; then
#           if octave --eval 'pl=pkg("list", "mboct-fem-pkg"); exit(isempty(pl))'; then
#             echo "mboct-fem-pkg is already installed"
#             exit 0
#           fi
#         fi
#       - git clone -b ${MBOCT_FEM_PKG_BRANCH} https://github.com/octave-user/mboct-fem-pkg.git
#       - make CXXFLAGS="${MBD_COMPILER_FLAGS}" -C mboct-fem-pkg install_local

octave-pkg-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
      - echo "octave packages test job"
      - export PATH=${MBD_INSTALL_PREFIX}/bin:${PATH}
      - export AWKPATH=${MBD_INSTALL_PREFIX}/share/awk:${AWKPATH}
      - which mbdyn
      - mbdyn --version
      - which mbdyn2easyanim.sh
      - which gmsh
      - gmsh --version
      - which octave
      - octave --version
      - |
        test_status="passed"
        failed_packages=""

        for pkgname in nurbs netcdf mboct-octave-pkg mboct-numerical-pkg; do
            printf "test package \"%s\"\n" "${pkgname}"

            case "${pkgname}" in
                mboct-octave-pkg)
                    mboct_tests_flag="${MBOCT_OCTAVE_PKG_TESTS}"
                    ;;
                mboct-numerical-pkg)
                    mboct_tests_flag="${MBOCT_NUMERICAL_PKG_TESTS}"
                    ;;
                mboct-mbdyn-pkg)
                    mboct_tests_flag="${MBOCT_MBDYN_PKG_TESTS}"
                    ;;
                mboct-fem-pkg)
                    mboct_tests_flag="${MBOCT_FEM_PKG_TESTS}"
                    ;;
                nurbs)
                    mboct_tests_flag="${OCT_NURBS_TESTS}"
                    ;;
                netcdf)
                    mboct_tests_flag="${OCT_NETCDF_TESTS}"
                    ;;
                *)
                    mboct_tests_flag="no"
                    ;;
            esac

            if test "${mboct_tests_flag}" = "no"; then
                printf "tests for package \"%s\" will be skipped\n" "${pkgname}"
            else
                rm -f fntests.out fntests.log

                curr_test_status="failed"

                OCTAVE_CODE="pkg(\"load\",\"${pkgname}\");p=pkg(\"list\",\"${pkgname}\");__run_test_suite__({p{1}.dir},{});"
                echo $OCTAVE_CODE

                if octave --eval "${OCTAVE_CODE}" >& fntests.out && awk -f parse_test_suite_status.awk fntests.out; then
                    curr_test_status="passed"
                fi

                case "${curr_test_status}" in
                    passed)
                        printf "octave testsuite for package \"%s\" passed\n" "${pkgname}"
                        ;;
                    *)
                        printf "octave testsuite for package \"%s\" failed\n" "${pkgname}"
                        if test -f fntests.log; then
                            cat fntests.log;
                        else
                            echo "fntests.log not found";
                        fi
                        test_status="failed"
                        failed_packages="${failed_packages} ${pkgname}"
                        ;;
                esac
            fi
        done
        echo ${test_status}
        case "${test_status}" in
            passed)
                echo "all tests passed"
                ;;
            *)
                echo "the following packages did not pass:"
                for pkgname in ${failed_packages}; do
                    printf "%s\n" "${pkgname}"
                done
                exit 1
                ;;
        esac


# mboct-mbdyn-pkg-unit-test-job:   # This job runs in the test stage.
#   stage: test    # It only starts when the job in the build stage completes successfully.
#   script:
#       - echo "mboct-mbdyn-pkg test"
#       - |
#         if test ${MBOCT_MBDYN_PKG_TESTS} = "no"; then
#           echo "mboct-mbdyn-pkg tests are not performed"
#           exit 0
#         fi
#       - export PATH=${MBD_INSTALL_PREFIX}/bin:${PATH}
#       - export AWKPATH=${MBD_INSTALL_PREFIX}/share/awk:${AWKPATH}
#       - which mbdyn
#       - mbdyn --version
#       - which mbdyn2easyanim.sh
#       - which gmsh
#       - gmsh --version
#       - rm -f fntests.out fntests.log
#       - octave --eval 'pkg("load","mboct-mbdyn-pkg"); __run_test_suite__({psta{1}.dir},{})' >& fntests.out
#       - echo "mboct-mbdyn-pkg testsuite finished:"
#       - if test -f fntests.log; then cat fntests.log; else echo "fntests.log not found"; fi
#       - awk -f parse_test_suite_status.awk fntests.out

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
