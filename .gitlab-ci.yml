# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - printf "checkout branch \"%s\"\n" "$CI_COMMIT_BRANCH"
    - git checkout $CI_COMMIT_BRANCH --force
    - printf "pulling\n"
    - git pull --force
    ## Let's try to speed up the build process a bit
    ## Execute bootstrap.sh and configure only if needed
    ## This conditional execution may be removed as soon as the testsuite is finished
    - |
      if ! test -x ./configure || test configure.ac -nt configure ; then
        chmod u+x ./bootstrap.sh
        if ! ./bootstrap.sh ; then
          exit 1
        fi
      fi
      if ! test -x configure ; then
        exit 1
      fi      
    - printf "configure ...\n"
    - |
      if ! test -f Makefile || test configure -nt Makefile; then
        if ! PYTHON_VERSION=3 ./configure \
                    CPPFLAGS="-I/usr/include/suitesparse -I/usr/include/trilinos -I/usr/lib64/python3.11/site-packages/numpy/core/include -I/usr/include/python3.11/ -I/usr/include/octave-8.4.0" \
                    --enable-python \
                    --enable-octave \
                    --enable-install_test_progs \
                    --prefix=$HOME/local/mbdyn-test-install \
                    --with-umfpack \
                    --with-static-modules \
                    --with-suitesparseqr ; then
          exit 1
        fi
      fi
      if ! test -f Makefile; then
        exit 1
      fi
    - echo "Clean up local installation directory"
    - rm -rf $HOME/local/mbdyn-test-install
    - echo "Compiling the code..."
    - make -j 11
    - echo "Install the code."
    - make install
    - echo "Run built-in unit tests"
    - make test

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests..."

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 10
    - echo "No lint issues found."

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
