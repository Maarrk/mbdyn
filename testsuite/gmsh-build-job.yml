gmsh-build-job:       # This job runs in the build stage, which runs first.
   variables:
     ## Install the latest stable release of Gmsh via wget
     GMSH_URL: "http://www.gmsh.info/bin/Linux/gmsh-stable-Linux64.tgz"

     ## Force reinstallation of a new version of Gmsh from $GMSH_URL
     ## The default value should be "no", but may be overridden manually when the pipeline is started.
     GMSH_REINSTALL: "no"
   stage: build
   script:
       - GMSH_INSTALL_PREFIX=${CI_PROJECT_DIR}/${GMSH_INSTALL_PREFIX}
       - GMSH_BUILD_DIR=${CI_PROJECT_DIR}/${GMSH_BUILD_DIR}
       - echo "gmsh build"
       - |
         if ${GMSH_INSTALL_PREFIX}/bin/gmsh --version >& /dev/null && test "${GMSH_REINSTALL}" = "no" && test "${MBD_CLEAN_ALL}" = "no" ; then
           echo "Gmsh was already installed ..."
           exit 0
         fi
       - GMSH_TAR=`basename ${GMSH_URL}`
       - |
         if ! test -d ${GMSH_BUILD_DIR}; then
           mkdir -p ${GMSH_BUILD_DIR}
         fi
       - cd ${GMSH_BUILD_DIR}
       - |
         if ! test -f ${GMSH_TAR}; then
           wget ${GMSH_URL}
         fi
       - test -f ${GMSH_TAR}
       - gmsh_bin=`find ${GMSH_BUILD_DIR} '(' -type f -and -path '*/bin/gmsh' ')'`
       - |
         if ! test -f "${gmsh_bin}"; then
           tar -zxvf ${GMSH_TAR}
         fi
       - gmsh_bin=`find ${GMSH_BUILD_DIR} '(' -type f -and -path '*/bin/gmsh' ')'`
       - test -f "${gmsh_bin}"
       - rm -rf ${GMSH_INSTALL_PREFIX}
       - mkdir -p "${GMSH_INSTALL_PREFIX}/bin"
       - install "${gmsh_bin}" "${GMSH_INSTALL_PREFIX}/bin"
       - ${GMSH_INSTALL_PREFIX}/bin/gmsh --version
   artifacts:
     expire_in: 24h
     paths:
       - $GMSH_INSTALL_PREFIX
   cache:
     key: libraries-build-job
     paths:
       - $NC_C_BUILD_DIR
       - $NC_CXX4_BUILD_DIR
       - $NL_BUILD_DIR
       - $GMSH_BUILD_DIR
