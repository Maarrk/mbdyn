octave-pkg-build-job:       # This job runs in the build stage, which runs first.
  stage: build
  needs:
      - job: mkl-build-job    
      - job: netcdf-c-build-job
        artifacts: true
      - job: netcdf-cxx4-build-job
        artifacts: true
      - job: nlopt-build-job
        artifacts: true        
      - job: mbdyn-build-job
        artifacts: true
  script:
        - MKL_INSTALL_PREFIX=${HOME}/${MKL_INSTALL_PREFIX}
        - NL_INSTALL_PREFIX=${CI_PROJECT_DIR}/${NL_INSTALL_PREFIX}
        - NC_INSTALL_PREFIX=${CI_PROJECT_DIR}/${NC_INSTALL_PREFIX}
        - OCT_PKG_BUILD_DIR=${CI_PROJECT_DIR}/${OCT_PKG_BUILD_DIR}
        - OCT_PKG_INSTALL_PREFIX=${CI_PROJECT_DIR}/${OCT_PKG_INSTALL_PREFIX}
        - echo "octave packages installation job"
        - echo "Detecting MKL ..."
        - |
          if test -d "${MKL_INSTALL_PREFIX}"; then
              echo "Find all pkg-config files in ${MKL_INSTALL_PREFIX} ..."
              find "${MKL_INSTALL_PREFIX}" '(' -name pkgconfig -or -name '*.pc' ')'
              echo "Search for ${MKL_PKG_CONFIG}.pc ..."
              MKL_PKG_CONFIG_FILE=`find "${MKL_INSTALL_PREFIX}" '(' -type f -and -name "${MKL_PKG_CONFIG}.pc" ')'`
              if test -f "${MKL_PKG_CONFIG_FILE}"; then
                  MKL_PKG_CONFIG_PATH=`dirname "${MKL_PKG_CONFIG_FILE}"`
                  echo "MKL_PKG_CONFIG_PATH=${MKL_PKG_CONFIG_PATH}"
              else
                  echo "File ${MKL_PKG_CONFIG}.pc not found"
              fi
          fi
        - |
            if test -d "${MKL_PKG_CONFIG_PATH}"; then
                export PKG_CONFIG_PATH="${MKL_PKG_CONFIG_PATH}:${PKG_CONFIG_PATH}"
                if pkg-config --validate "${MKL_PKG_CONFIG}"; then
                  export PARDISO_INC=`pkg-config --cflags ${MKL_PKG_CONFIG}`
                  export PARDISO_LIBS=`pkg-config --libs ${MKL_PKG_CONFIG}`
                  export PARDISO_LIBS="${PARDISO_LIBS} `pkg-config --libs-only-L ${MKL_PKG_CONFIG} | sed  's/^-L\//-Wl,-rpath=\//g'`"
                else
                  echo "Warning: MKL pkg-config ${MKL_PKG_CONFIG} is not valid"
                fi
            else
                echo "Warning: MKL_PKG_CONFIG_PATH does not exist"
            fi
        - |
          NL_PKG_CONFIG_PATH=`find ${NL_INSTALL_PREFIX} '(' -type d -and -name pkgconfig ')'`
          if ! test -z "${NL_PKG_CONFIG_PATH}"; then
            export PKG_CONFIG_PATH="${NL_PKG_CONFIG_PATH}:${PKG_CONFIG_PATH}"
            export NLOPT_LIBS=`pkg-config --libs nlopt`
            export NLOPT_INC=`pkg-config --cflags nlopt`
            NL_LIBDIR=`pkg-config --variable=libdir nlopt`
            if ! test -z "${NL_LIBDIR}"; then
                NLOPT_LIBS="${NLOPT_LIBS} -Wl,-rpath=${NL_LIBDIR}"
            fi
          fi
        - |
          if "${NC_INSTALL_PREFIX}/bin/nc-config" --version >& /dev/null; then
            NC_PKG_CONFIG_PATH=`find ${NC_INSTALL_PREFIX} '(' -type d -and -name pkgconfig ')'`
            if ! test -z "${NC_PKG_CONFIG_PATH}"; then
              export PKG_CONFIG_PATH="${NC_PKG_CONFIG_PATH}:${PKG_CONFIG_PATH}"
            fi
            export PATH="${NC_INSTALL_PREFIX}/bin:${PATH}"
          fi
        - echo PKG_CONFIG_PATH="${PKG_CONFIG_PATH}"
        - echo NLOPT_LIBS="${NLOPT_LIBS}"
        - echo NLOPT_INC="${NLOPT_INC}"
        - echo PARDISO_LIBS="${PARDISO_LIBS}"
        - echo PARDISO_INC="${PARDISO_INC}"
        - if ! test -d ${OCT_PKG_BUILD_DIR}; then mkdir -p ${OCT_PKG_BUILD_DIR}; fi
        - cd ${OCT_PKG_BUILD_DIR}
        - |
          for pkgname in ${OCT_PKG_LIST}; do
              printf "build package \"%s\"\n" "${pkgname}"

              pkg_rebuild_flag=$(echo ${OCT_PKG_REBUILD} | awk -v RS=" " -F ":" "/^${pkgname}\>/{print \$2}")

              case "${pkg_rebuild_flag}" in
                  yes|no)
                      ;;
                  *)
                      pkg_rebuild_flag="no"
                      ;;
              esac

              pkg_branch=$(echo ${OCT_PKG_BRANCH} | awk -v RS=" " -F ":" "/^${pkgname}\>/{print \$2}")

              if test -z "${pkg_branch}"; then
                  pkg_branch="master"
              fi

              OCTAVE_CMD=$(printf 'pkg("local_list","%s");pkg("load","%s");' "${OCT_PKG_INSTALL_PREFIX}/octave_packages" "${pkgname}")

              if test "${pkg_rebuild_flag}" = "no" -a "${MBD_CLEAN_ALL}" = "no"; then
                  echo ${OCTAVE_EXEC} -qfH --eval ${OCTAVE_CMD}
                  if ${OCTAVE_EXEC} -qfH --eval "${OCTAVE_CMD}"; then
                      printf "installation of \"%s\" will be skipped, because the package is already installed\n" "${pkgname}"
                      continue
                  else
                      printf "package \"%s\" is not installed\n" "${pkgname}"
                  fi
              fi

              OCTAVE_CMD=$(printf 'pkg("local_list","%s");pkg("uninstall","-nodeps","-local","-verbose","%s");' "${OCT_PKG_INSTALL_PREFIX}/octave_packages" "${pkgname}")

              echo ${OCTAVE_EXEC} -qfH --eval "${OCTAVE_CMD}"

              # Force a new installation
              if ! ${OCTAVE_EXEC} -qfH --eval "${OCTAVE_CMD}"; then
                  printf "Warning: failed to uninstall package \"%s\"\n" "${pkgname}"
              fi

              case "${pkgname}" in
                  mboct-*-pkg)
                      if test -d "${pkgname}"; then
                          rm -rf "${pkgname}"
                      fi
                      if ! git clone -b "${pkg_branch}" "https://github.com/octave-user/${pkgname}.git"; then
                          printf "failed to clone package \"%s\" from github.com\n" "${pkgname}"
                          exit 1
                      fi

                      if ! make -C "${pkgname}" dist; then
                          printf "failed to build package \"%s\"\n" "${pkgname}"
                      fi

                      pkg_tar_file=$(find "${pkgname}" '(' -type f -and -path "*/target/${pkgname}*.tar.gz" ')')

                      if test -z "${pkg_tar_file}"; then
                        printf "failed to install package \"%s\"\n" "${pkgname}"
                        exit 1
                      fi

                      OCTAVE_CMD=$(printf 'pkg("prefix","%s","%s");pkg("local_list","%s");pkg("install","-local","-verbose","%s");' "${OCT_PKG_INSTALL_PREFIX}" "${OCT_PKG_INSTALL_PREFIX}" "${OCT_PKG_INSTALL_PREFIX}/octave_packages" "${pkg_tar_file}")

                      echo ${OCTAVE_EXEC} --eval "${OCTAVE_CMD}"

                      CXXFLAGS="${MBD_COMPILER_FLAGS}" ${OCTAVE_EXEC} --eval "${OCTAVE_CMD}"

                      if test $? != 0; then
                        printf "failed to install package \"%s\"\n" "${pkgname}"
                        exit 1
                      fi

                      case "${pkgname}" in
                      mboct-fem-pkg)
                          ## FIXME: Need install fem_pre_mesh_size since octave's package manager does not run "make install"
                          mkdir -p "${OCT_PKG_INSTALL_PREFIX}/bin"
                          pushd "${pkgname}/src"
                          chmod u+x bootstrap
                          ./bootstrap
                          ./configure CXXFLAGS="${MBD_COMPILER_FLAGS}" --prefix="${OCT_PKG_INSTALL_PREFIX}"
                          make
                          make install
                          popd
                          ;;
                      esac
                      ;;
                  *)
                      SAVE_LDFLAGS=""

                      case "${pkgname}" in
                          netcdf)
                              SAVE_LDFLAGS="${LDFLAGS}"
                              export LDFLAGS="-Wl,-rpath=`${NC_INSTALL_PREFIX}/bin/nc-config --libdir`"
                              ;;
                      esac

                      # Assume that the package is hosted at octave-forge
                      OCTAVE_CMD=$(printf 'pkg("prefix","%s","%s");pkg("local_list","%s");pkg("install","-local","-verbose","-forge","%s");' "${OCT_PKG_INSTALL_PREFIX}" "${OCT_PKG_INSTALL_PREFIX}" "${OCT_PKG_INSTALL_PREFIX}/octave_packages" "${pkgname}")

                      echo ${OCTAVE_EXEC} --eval "${OCTAVE_CMD}"
                      if ! ${OCTAVE_EXEC} -qfH --eval "pkg install -verbose -local -forge ${pkgname}"; then
                          printf "failed to install package \"%s\" from octave-forge\n" "${pkgname}"
                          exit 1
                      fi

                      export LDFLAGS="${SAVE_LDFLAGS}"
                      ;;
              esac

              if ${OCTAVE_EXEC} -qfH --eval "pkg load ${pkgname}"; then
                  printf "package \"%s\" was loaded successfully\n" "${pkgname}"
              else
                  printf "failed to load package \"%s\"\n" "${pkgname}"
                  exit 1
              fi
          done
        - rm -rf ${OCT_PKG_BUILD_DIR}/*
  artifacts:
   name: octave-pkg-install-prefix
   expire_in: 2 weeks   
   paths:
     - $OCT_PKG_INSTALL_PREFIX
