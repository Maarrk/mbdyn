INCPATH=$(HOME)/Sources/C++/include
BASE=$(HOME)/MBDyn/Devel/mbdyn-devel
HERE=$(BASE)/utils
INCS=-I ../src -I $(INCPATH)
LIBS=-L $(HOME)/Sources/C++/lib/release -lmymath -lmylib -lg2c
FLAGS=-O6 # -fomit-frame-pointer


vpath %.h ..
vpath %.h $(INCPATH)

INTMODSRC= mod-osc.cc mod-prig.cc mod-pdef.cc mod-pdef2.cc mod-duffin.cc
INTMOD= mod-osc.so mod-prig.so mod-pdef.so mod-pdef2.so mod-duffin.so

SRCS= rotrel.cc eu2rot.cc rot2eu.cc rot2eup.cc rot2phi.cc \
      deriv.c cl.cc loadable.cc posrel.cc \
      sockdrive.cc autopilot.cc \
      intg.cc $(INTMODSRC)
ALL= rotrel eu2rot rot2eu rot2eup rot2phi \
     deriv cl loadable posrel \
     sockdrive autopilot \
     intg $(INTMOD)


CXX=g++
CC=gcc

all: $(ALL)      


### Rotazione relativa tra due corpi(matrice o angoli di Eulero in gradi)
rotrel: rotrel.o
	$(CXX) $(FLAGS) -o $@ $< $(LIBS)
	rm -f $(HOME)/bin/$@
	ln -s $(HERE)/$@ $(HOME)/bin/$@

rotrel.o: rotrel.cc
	$(CXX) $(FLAGS) $(INCS) -o $@ -c $<

### matrice di rotazione dagli angoli di Eulero (in gradi)
eu2rot: eu2rot.o
	$(CXX) $(FLAGS) -o $@ $< $(LIBS)
	rm -f $(HOME)/bin/$@
	ln -s $(HERE)/$@ $(HOME)/bin/$@

eu2rot.o: eu2rot.cc
	$(CXX) $(FLAGS) $(INCS) -o $@ -c $<

### angoli di Eulero (in gradi) dalla matrice di rotazione
rot2eu: rot2eu.o
	$(CXX) $(FLAGS) -o $@ $< $(LIBS)
	rm -f $(HOME)/bin/$@
	ln -s $(HERE)/$@ $(HOME)/bin/$@

rot2eu.o: rot2eu.cc
	$(CXX) $(FLAGS) $(INCS) -o $@ -c $<

### parametri di Eulero dalla matrice di rotazione
rot2eup: rot2eup.o
	$(CXX) $(FLAGS) -o $@ $< $(LIBS)
	rm -f $(HOME)/bin/$@
	ln -s $(HERE)/$@ $(HOME)/bin/$@

rot2eup.o: rot2eup.cc
	$(CXX) $(FLAGS) $(INCS) -o $@ -c $<

### rotation vector dalla matrice di rotazione
rot2phi: rot2phi.o
	$(CXX) $(FLAGS) -o $@ $< $(LIBS)
	rm -f $(HOME)/bin/$@
	ln -s $(HERE)/$@ $(HOME)/bin/$@

rot2phi.o: rot2phi.cc
	$(CXX) $(FLAGS) $(INCS) -o $@ -c $<

### deriva i files di output
deriv: deriv.o
	$(CC) $(FLAGS) -o $@ $<
	rm -f $(HOME)/bin/$@
	ln -s $(HERE)/$@ $(HOME)/bin/$@

deriv.o: deriv.c
	$(CC) $(FLAGS) $(INCS) -o $@ -c $<

### desk calculator
cl: cl.o
	$(CXX) $(FLAGS) -o $@ $< $(LIBS)
	rm -f $(HOME)/bin/$@
	ln -s $(HERE)/$@ $(HOME)/bin/$@

cl.o: cl.cc
	$(CXX) $(FLAGS) -DUSE_TABLE $(INCS) -o $@ -c $<

### socket drive client
sockdrive: sockdrive.o
	$(CXX) $(FLAGS) -o $@ $< $(LIBS)
	rm -f $(HOME)/bin/$@
	ln -s $(HERE)/$@ $(HOME)/bin/$@

sockdrive.o: sockdrive.cc
	$(CXX) $(FLAGS) -DUSE_TABLE $(INCS) -o $@ -c $<

### "autopilot" for socket drive 
autopilot: autopilot.o
	$(CXX) $(FLAGS) -o $@ $< $(LIBS)
	rm -f $(HOME)/bin/$@
	ln -s $(HERE)/$@ $(HOME)/bin/$@

autopilot.o: autopilot.cc
	$(CXX) $(FLAGS) -DUSE_TABLE $(INCS) -o $@ -c $<

### module function names mangler
loadable: loadable.o
	$(CXX) $(FLAGS) -o $@ $< $(LIBS)
	rm -f $(HOME)/bin/$@
	ln -s $(HERE)/$@ $(HOME)/bin/$@

loadable.o: loadable.cc
	$(CXX) $(FLAGS) $(INCS) -o $@ -c $<

### Spostamento relativo tra due corpi
posrel: posrel.o
	$(CXX) $(FLAGS) -o $@ $< $(LIBS)
	rm -f $(HOME)/bin/$@
	ln -s $(HERE)/$@ $(HOME)/bin/$@

posrel.o: posrel.cc
	$(CXX) $(FLAGS) $(INCS) -o $@ -c $<
				
### integrator
intg: intg.o
	$(CXX) $(FLAGS) -ldl --export-dynamic -o $@ $< $(LIBS)
	rm -f $(HOME)/bin/$@
	ln -s $(HERE)/$@ $(HOME)/bin/$@

intg.o: intg.cc
	$(CXX) $(FLAGS) $(INCS) -o $@ -c $<

### modules for integrator
$(INTMOD): %.so : %.cc
	$(CXX) $(FLAGS) $(INCS) -shared -o $@ $< $(LIBS)



depend:
	makedepend -- $(FLAGS) $(INCS) -- $(SRCS)
	
clean:
	rm -rf *.o *~ Makefile Makefile.bak $(ALL)
	
# DO NOT DELETE
