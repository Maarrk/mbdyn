$Header$

MBDyn (C) is a multibody analysis code.
http://www.mbdyn.org

Copyright (C) 1996-2009

Pierangelo Masarati     <masarati@aero.polimi.it>
Paolo Mantegazza        <mantegazza@aero.polimi.it>



A. Configuration:

	- test for '_' appended to F77 symbols (recent autoconf does that)
	- audit all the suite for not-so-GNU systems
	- add test for pow_dd stuff (might be needed by fortran code)
	- add check for make



B. Package:

	- add a comprehensive test suite
	- make more compliant to GNU style



C. Libraries:

	- make the libraries installable
	- abstract libraries in a rational manner, to reduce/eliminate
	  cross-dependencies



D. Code:

	Large Projects:
	- implement binary, or hard, restart
	- add MATLAB/Octave/Scilab and Simulink/Scicos hooks.
		Large project: turn mbdyn into a module for Simulink/Scicos
		(see contrib/SimulinkInterface/; need an implicit extension).
	- remove node/element type listing from "control data" block;
	  use STL containers to keep track of model components
	  (partially DONE for elements)
	- implement contacts with non-flat surfaces
	- implement "smart" structural nodes, so that static/dynamic
		is detected
	- implement optional binary/ascii output (use NetCDF; partially DONE)
	- abstract NetCDF use for aggregate data (e.g. Vec3)
	- add relative reference frame overall dynamics
		- rigid body (DONE)
		- modal element
		- air properties (DONE)
		- gravity (?)
	- add absolute/relative reference frame dynamics interface
	- generalize inflow models for fixed wing lifting surfaces

	Medium Projects:
	- recover existing soft restart (Michele Attolico worked at it)
	- add MATLAB hooks
	- add Octave hooks
	- add Scilab hooks
	- add Simulink hooks (DONE by Michele Attolico:
		see contrib/SimulinkInterface).
	- add Scicos hooks
	- add a "shell" element that executes external programs,
	  and allow exploitation for entities like elements, drives,
	  constitutive laws and so
	- develop a trim control as external command that drives simulations.
	- improve friction and add it to all joints (Marco Morandini is
		working at it; suggestion: try a transition force from stick
		to slip that is higher than slip force)
	- review output to allow selective ascii/binary output (see NetCDF)
	- replace MyLList and LLStack with STL containers
	- add friction to contacts
	- rework modal element to be static/dynamic (DONE)
	- rework modal element to use momentum and momenta moment instead
		of linear and angular velocities (so the "modal" node
		is no longer required)
	- rework revolute joints to allow normal force to be computed
		as a combination of constraint reactions (constraint location)
	- implement modal element binary data using netcdf:
		.fem:
			femgen > ascii
			femgen > netcdf
			mbdyn < ascii > netcdf
		.mod:
			mbdyn > ascii
			mbdyn > netcdf (in global output database)
	- add aerodynamic elements Jacobian matrix contribution
	  (DONE by Mattia Mattaboni)
	- add sparse eigenvalue extraction (DONE, using ARPACK)
	- add center of mass computation (DONE)/constraint
	- add matrix scaling (partially DONE)

	Small Projects:
	- add MATLAB/Octave and Simulink hooks.
		``shell'' element, drive and so that executes unix commands 
		including scripts, significantly matlab scripts.
	- move critical Reynolds numbers from constants to fluid properties
		with pressure/temperature dependencies.
	- add Reynolds dependence to AeroData
	- improve symbolic constitutive law (based on GiNaC)
	- move exception handling towards <stdexcept> (DONE otherwise)
	- review/improve user-configurable statistics output (partially DONE;
		see "output:" statement in integrator data block)
	- add Matlab-compatible sparse matrix generation for sparse
		matrix eigenvalue analysis (eigs; DONE)
	- add selected output streamed on sockets for interactive analysis
		by implementing sort of "sensors", possibly based on the
		elements' "private data" (Michele Attolico worked at it;
		see "output elements" and RTAI-related features; DONE)
	- add rot2any/any2rot utilities
	- try to rewrite hydraulic nodes as scalar differential (?)
	- add joints like:
		- 2-node clamp (spherical + prismatic; DONE: total)
		- universal without displacement constraints (DONE)
		- inplane and inline between a node and the ground
		  (DONE: total pin joint)
	- allow to define modules as separate entities which are later
		referred to by labels, like c81 data or hydraulic fluids.
		(this is no longer required, since using ltdl one can set
		the module path and then use the file name as a label;
		the underlying library will open modules exactly once
		despite they're loaded many times; however, this would
		allow to use statically linked modules as loadable
		elements) (DONE)
	- link to Taucs sparse solver: http://www.tau.ac.il/~stoledo/taucs
		(Marco Morandini is working at it)
	- add aircraft instruments as sensors (e.g. writing measures
		to parameter nodes; refer to
		http://www.allstar.fiu.edu/aero/FlightIns.htm ):
		- airspeed indicator		(V-Vinf).Norm()
		- ground speed indicator	((I-e3.Tens(e3))*V).Norm()
		- altimeter			e3.Dot(X)
		- attitude indicator (pitch and bank)	*
		- turn and slip indicator		+
		- vertical speed indicator	e3.Dot(V-Vinf)
		- angle of attack indicator	v=R.Transpose()*(V-Vinf);
						atan2(v(3),v(1))

		*:	pitch=atan2(e1(3),e1(1));
			bank=atan2(e2(3),e2(2));
		+:	turn=Omega(3);
			slip=?
		(partially DONE: the "aircraft instruments" element provides
		measures as private data, and as output to .aer files).
	- allow the FEM data filename as command-line arg in utils/femgen
	- add orthogonality test when reading orientation matrix
	- append constitutive law output, if any, to elements' output
	  (DONE infrastructure, shock absorber and rods)
	- merge tool to generate ADAMS/View .cmd models from raw output
		(Gian Luca Ghiringhelli is working at it; OBSOLETE)
	- add piecewise linear or other simple generic elastic constitutive
		laws (DONE: scalar function-based CL)
	- allow runtime load of constitutive laws (DONE)
	- allow runtime load of drive callers (DONE)
	- generate a binary form of the .fem data for the modal element
		that can be loaded instead of the text version according
		to time stamps, to speed-up large models input (DONE)
	- add an optional configuration-dependent constitutive law
	  to the unconstrained displacements/rotations of selected joints:
	  - the revolute family
	  - ...
	- add function max(), min() to math parser (DONE)
	- implement an output trigger (replaces output frequency; DONE)
	- modal element:
	  - add singularity checks (warn if modal k is singular; ???)
	  - add consistency checks of modal mass matrices (m = X^T*M*X; DONE)
	- modal interface node: accelerations can be recovered
	  for use in loose connections; design and implement a solution (DONE)
	- turn the modal joint into sets of elements:
		- modal database: FEM model
		- modal dynamics as a "deformable body"
		- modal clamp constraint (as now, but separate from dynamics)
		- specialized modal constraints (as opposed to clamping
		  a node with the clamp constraint plus a regular joint)
		- modal force (DONE)
	  this allows to add arbitrary elements connected to the modal element
	- use getopt(3) in utils/
	- add package-wide support for WinSocks in communication entities,
	  including SimulinkInterface (using MSYS/MinGW)
	- add pseudo-realtime support based on nanosleep(2) (DONE)
	- add RTAI-based motion output (DONE)
	- use 3D (or 6D) templates for force and couple elements, preserving
	  backward compatibility of the input as much as possible (DONE, 3D)
	- add modal constraint: framework for generic constraints among
	  modal variables; constraint that imposes the value of modal vars
	- add "static" modal element (no dynamics equations)
	- allow deformable hinge to have optional (useless) "position" spec
	- output of incremental Euler vector
	- check inertia computed with that from block 12 in modal joint
	- add linear time variant constitutive law (DONE)
	- add elastic and viscous variants of linear time variant const law



E. Bugs/missing features:

	- check for nested /* */ comments in parsers (DONE)
	- eliminate nasty dependence from f2c typedef's (doublereal and so)
	- review deformable viscous/viscoelastic hinge according
	  to the elastic one (DONE)
	- check "universal pin"
	- fix etc/modal.d/MBDyn_NASTRAN_alter_[1-2].nas;
          allow the use of node sets to reduce the amount of FEM nodes 
	  that are passed to the model element (e.g. no nodes without
	  inertia that do not participate in the interface)
	- clarify how to increase the size of models utils/femgen can handle
	- introduce references for hints
	- allow strings as mode names in modal elements (joint, force, ...)
	- add SetInitialValue to modal element
	- allow to override initial modal value and derivative in .fem (DONE)
	- check initial assembly of joints in slidercrank_r



F. Documentation:

	- document the utilities in a separate man page (utils & scripts)
	- update and audit the input manual (partially DONE)
	- document output (partially DONE)
	- document element private data names (partially DONE)
	- document piezo beam
	- tutorial for piezo beam (DONE)
	- clarify (with demos) the functionality of the modal element (DONE)
	- document electric elements and sensors
	- document additional output of rotations (DONE)

