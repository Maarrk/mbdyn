MBDyn (C) is a multibody analysis code.
http://www.mbdyn.org

Copyright (C) 1996-2005

Pierangelo Masarati     <masarati@aero.polimi.it>
Paolo Mantegazza        <mantegazza@aero.polimi.it>



A. Configuration:

	- test for '_' appended to F77 symbols (recent autoconf does that)
	- audit all the suite for not-so-GNU systems
	- add test for pow_dd stuff (might be needed by fortran code)
	- add check for make



B. Package:

	- add a comprehensive test suite
	- make more compliant to GNU style



C. Libraries:

	- make the libraries installable



D. Code:

	Large Projects:
	- implement binary, or hard, restart
	- add MATLAB/Octave and Simulink hooks.
		Large project: turn mbdyn into a module for Simulink.
	- remove node/element type listing from "control data" block;
	  use STL containers to keep track of model components
	- implement contacts with non-flat surfaces

	Medium Projects:
	- recover existing soft restart (Michele Attolico is working at it)
	- add MATLAB/Octave and Simulink hooks (Michele Attolico is working
		at it; see contrib/SimulinkInterface).
		``matlab'' element that feeds matlab with data structures 
		containing variables and executes matlab code.
	- develop a trim control as an external command that drives
		a simulation.
	- improve friction and add it to all joints (Marco Morandini is
		working at it; suggestion: try a transition force from stick
		to slip that is higher than slip force)
	- add Arnoldi-like eigenvalue extraction module (Giuseppe Quaranta
		is working at it; see var/pod*.m)
	- review output to allow selective ascii/binary output
	- replace MyLList and LLStack with STL containers
	- add friction to contacts

	Small Projects:
	- add MATLAB/Octave and Simulink hooks.
		``shell'' element, drive and so that executes unix commands 
		including scripts, significantly matlab scripts.
	- move critical Reynolds numbers from constants to fluid properties
		with pressure/temperature dependencies.
	- improve symbolic constitutive law (based on GiNaC)
	- move exception handling towards <stdexcept>
	- review/improve user-configurable statistics output (partially done;
		see "output:" statement in integrator data block)
	- add Matlab-compatible sparse matrix generation for sparse
	  matrix eigenvalue analysis (eigs)
	- add selected output streamed on sockets for interactive analysis
		by implementing sort of "sensors", possibly based on the
		elements' "private data" (Michele Attolico is working at it;
		see "output elements" and RTAI-related features)
	- add rot2any/any2rot utilities
	- try to rewrite hydraulic nodes as scalar differential (?)
	- add joints like:
		- 2-node clamp (spherical + prismatic in one joint)
		- universal without displacement constraints (DONE)
		- inplane and inline between a node and the ground
	- allow to define modules as separate entities which are later
		referred to by labels, like c81 data or hydraulic fluids.
		(this is no longer required, since using ltdl one can set
		the module path and then use the file name as a label;
		the underlying library will open modules exactly once
		despite they're loaded many times; however, this would
		allow to use statically linked modules as loadable
		elements) (DONE)
	- link to Taucs sparse solver: http://www.tau.ac.il/~stoledo/taucs
		(Marco Morandini is working at it)
	- add aircraft instruments as sensors (e.g. writing measures
		to parameter nodes; refer to
		http://www.allstar.fiu.edu/aero/FlightIns.htm ):
		- airspeed indicator		(V-Vinf).Norm()
		- ground speed indicator	((I-e3.Tens(e3))*V).Norm()
		- altimeter			e3.Dot(X)
		- attitude indicator (pitch and bank)	*
		- turn and slip indicator		+
		- vertical speed indicator	e3.Dot(V-Vinf)
		- angle of attack indicator	v=R.Transpose()*(V-Vinf);
						atan2(v(3),v(1))

		*:	pitch=atan2(e1(3),e1(1));
			bank=atan2(e2(3),e2(2));
		+:	turn=Omega(3);
			slip=?
		(partially done: the "aircraft instruments" element provides
		measures as private data, and as output to .aer files).
	- allow the FEM data filename as command-line arg in utils/femgen
	- add orthogonality test when reading orientation matrix
	- append constitutive law output, if any, to elements' output
	  (DONE infrastructure, shock absorber and rods)
	- merge tool to generate ADAMS/View .cmd models from raw output
		(Gian Luca Ghiringhelli is working at it)
	- add piecewise linear or other simple generic elastic constitutive
		laws (Aakash Dalwani is working at it)
	- allow runtime load of constitutive laws
	- allow runtime load of drive callers
	- generate a binary form of the .fem data for the modal element
		that can be loaded instead of the text version according
		to time stamps, to speed-up large models input (DONE)
	- add an optional configuration-dependent constitutive law
	  to the unconstrained displacements/rotations of selected joints:
	  - the revolute family
	  - ...
	- add function max(), min() to math parser (DONE)
	- implement an output trigger (replaces output frequency)
	- modal element:
	  - add singularity checks (warn if modal k is singular)
	  - add consistency checks of modal mass matrices (m = X^T*M*X)



E. Bugs/missing features:

	- check for nested /* */ comments in parsers (DONE)
	- eliminate nasty dependence from f2c typedef's (doublereal and so)
	- review deformable viscous/viscoelastic hinge according
	  to the elastic one (DONE)
	- check "universal pin"
	- fix etc/modal.d/MBDyn_NASTRAN_alter_[1-2].nas;
          allow the use of node sets to reduce the amount of FEM nodes 
	  that are passed to the model element (e.g. no nodes without
	  inertia that do not participate in the interface)
	- clarify how to increase the size of models utils/femgen can
	  handle
	- introduce references for hints



F. Documentation:

	- document the utilities in a separate man page (utils & scripts)
	- update and audit the input manual (PARTLY DONE)
	- document output (PARTLY DONE)
	- document element private data names (PARTLY DONE)
	- document piezo beam
	- tutorial for piezo beam (DONE)
	- clarify (with demos) the functionality of the modal element

