//
// time: Wed Apr 28 08:36:45 1993

//
// version: 1.0.0
//
// Begin MDF
// MODULE M3FromRowVectors
// CATEGORY Vectors and Matrices
// DESCRIPTION returns a 3x3 matrix (1x9 vector) from 3 1x3 row vectors
// INPUT V0; value list or field; {[1, 0, 0]}; 1x3 vector
// INPUT V1; value list or field; {[0, 1, 0]}; 1x3 vector
// INPUT V2; value list or field; {[0, 0, 1]}; 1x3 vector
// OUTPUT M3; value or value list or field; 3x3 matrix (1x9 row vector)
// End MDF
//
//
// comment: Network name: M3FromRowVectors.net
// comment: Macro name: M3FromRowVectors
// comment: Category: Vectors and Matrices
// comment: Author: Chris Pelkie, Cornell Theory Center Visualization staff, chrisp@tc.cornell.edu
// comment: Date last modified: 04/13/93
// comment: Other required files: none
// comment: 
// comment: M3FromRowVectors assembles a 3x3 matrix (or field of 3x3 matrices) from 3 1x3 input row vectors (or 3 fields of 1x3 vectors). In fact, it outputs a 1x9 row vector (an M3 structure) since Compute cannot index matrices.
// comment: 
// comment: Example:
// comment: Input 1 = [1,2,3]
// comment: Input 2 = [4,3,2]
// comment: Input 3 = [4,5,6]
// comment: 
// comment: Output (in 3x3 form) =
// comment: | 1 2 3 |
// comment: | 4 3 2 |
// comment: | 4 5 6 |
// comment: 
// comment: Output (in actuality, an M3) =
// comment: [1,2,3,4,3,2,4,5,6]
// comment: 
// comment: See also:
// comment: M3ToElements (Vectors and Matrices macro)
// comment: M3FromElements (Vectors and Matrices macro)
// comment: M2FromRowVectors (Vectors and Matrices macro)
// comment: and other similarly named macros
//
// workspace: width = 1000, height = 1000
// layout: snap = 0, width = 30, height = 50, align = C
//
macro M3FromRowVectors(
        V0 = {[1, 0, 0]},
        V1 = {[0, 1, 0]},
        V2 = {[0, 0, 1]}) -> (
        M3)
{
    //
    // node Input[1]: x = 25, y = 52, inputs = 0, label = Input
    // parameter: position = 1, name = 'V0', value = '{[1, 0, 0]}', descriptive = 0, description = '1x3 vector', required = 0
    //
    Input_1_out_1 = V0;
    //
    // node Input[2]: x = 97, y = 52, inputs = 0, label = Input
    // parameter: position = 2, name = 'V1', value = '{[0, 1, 0]}', descriptive = 0, description = '1x3 vector', required = 0
    //
    Input_2_out_1 = V1;
    //
    // node Input[3]: x = 167, y = 52, inputs = 0, label = Input
    // parameter: position = 3, name = 'V2', value = '{[0, 0, 1]}', descriptive = 0, description = '1x3 vector', required = 0
    //
    Input_3_out_1 = V2;
    //
    // node Compute[1]: x = 82, y = 188, inputs = 4, label = Compute
    // input[1]: type = 64, value = "[$0.0, $0.1, $0.2, $1.0, $1.1, $1.2, $2.0, $2.1, $2.2]"
    // expression: value = [V0.0, V0.1, V0.2, V1.0, V1.1, V1.2, V2.0, V2.1, V2.2]
    // name[2]: value = V0
    // name[3]: value = V1
    // name[4]: value = V2
    //
    Compute_1_out_1 =
        Compute(
            Compute_1_in_1,
            Input_1_out_1,
            Input_2_out_1,
            Input_3_out_1
        ) [instance: 1];
    //
    // node Output[1]: x = 91, y = 273, inputs = 1, label = Output
    // parameter: position = 1, name = 'M3', value = ' ', descriptive = 0, description = '3x3 matrix (1x9 row vector)', required = 0
    //
    Output_1_in_1 = Compute_1_out_1;
    M3 = Output_1_in_1;
}

Compute_1_in_1 = "[$0.0, $0.1, $0.2, $1.0, $1.1, $1.2, $2.0, $2.1, $2.2]";
Compute_1_in_2 = NULL;
Compute_1_in_3 = NULL;
Compute_1_in_4 = NULL;
Output_1_in_1 = NULL;
