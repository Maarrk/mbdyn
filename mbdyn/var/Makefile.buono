### Make file per Mbdyn

export

### name of the program
TARGET=mbdyn
### one of: bare, mechanic, aeroelastic, electric, aeroservoelastic
#TARGETTYPE=bare
#TARGETTYPE=mechanic
#TARGETTYPE=electric
#TARGETTYPE=hydraulic
#TARGETTYPE=aeroelastic
#TARGETTYPE=electromechanic
#TARGETTYPE=hydromechanic
#TARGETTYPE=electrohydraulic
#TARGETTYPE=aeroelectroelastic
TARGETTYPE=aeroservoelastic

MYLIB=mylib
MYMATH=mymath
LIBMYLIB=lib$(MYLIB).a
LIBMYMATH=lib$(MYMATH).a

### Modificare qui la configurazione che si intende compilare (prima di
### cambiare configurazione conviene usare un `make clean' o `make cleanall'
### perche' il make non e' in grado di riconoscere per quale configurazione
### erano stati inizialmente compilati i files
ACTIVECONFIG=release
#ACTIVECONFIG=debug

### Modificare qui per la macchina di compilazione (serve ad acquisire la
### struttura delle directories, verra' poi levata per il make definitivo)

ifeq ($(HOSTNAME),diampp1.aero.polimi.it)
    WHERE=poli
else
    ifeq ($(HOSTNAME),pcando.home.net)
        WHERE=home
    endif
    ifeq ($(HOSTNAME),pcando)
        WHERE=home
    endif
    ifeq ($(HOSTNAME),mbdyn.aero.polimi.it)
        WHERE=home
    endif
    ifeq ($(HOSTNAME),ando-nb.sys-net.it)
        WHERE=home
    endif
endif

### utilizzo di MPICH per il calcolo parallelo
USE_MPI=YES
#USE_MPI=NO

#JUMPSHOTLOG=YES
JUMPSHOTLOG=NO

#DEBUG_MPI=YES
DEBUG_MPI=NO

### libreria per la partizione dei dati in ingresso 
#USE_METIS = YES
USE_METIS = NO

### meschach (libreria matematica in C)
#USE_MESCHACH=NO
USE_MESCHACH=YES

COMPPATH=
#COMPPATH=/usr/local/gcc-2.95.2/bin/

### Struttura delle directories
ifeq ($(WHERE),poli)  
    MACHINE=-DLINUX -DHAVE_GETOPT -DHAVE_GETOPT_LONG -DHAVE_TIMES_H \
            -DUSE_UNDERSCORE -DHAVE_LOADABLE -DHAVE_STRSTREAM_H \
	    -DHAVE_SIGNAL -DHAVE_FORM_IN_OSTREAM
    LOCALCPPFLAGS=
    SPECCXXFLAGS=-DUSE_ELEM_ITER # -DUSE_EXCEPTIONS -fhandle-exceptions
    FFLAGS=-malign-double -fforce-mem -fforce-addr -fstrength-reduce\
           -fexpensive-optimizations -funroll-loops -funroll-all-loops\
    	   -O
    FC=$(COMPPATH)g77
    LIBF=-lf2c
    USE_LAPACK=NO
endif
ifeq ($(WHERE),home)
    MACHINE=-DLINUX -DHAVE_GETOPT -DHAVE_GETOPT_LONG -DHAVE_TIMES_H \
            -DUSE_UNDERSCORE -DHAVE_LOADABLE -DHAVE_STRSTREAM_H \
	    -DHAVE_SIGNAL -DHAVE_SOCKLEN -DUSE_PAM -DHAVE_FORM_IN_OSTREAM \
	    -DUSE_SCHUR
    LOCALCPPFLAGS=-I/usr/include/security
    SPECCXXFLAGS=-DUSE_ELEM_ITER -DUSE_EXCEPTIONS\
                 -fexceptions #-fmove-all-movables 
    USE_LAPACK=NO
    FFLAGS=-malign-double -fforce-mem -fforce-addr -fstrength-reduce\
           -fexpensive-optimizations -funroll-loops -funroll-all-loops\
	   -O -march=pentiumpro
    FC=$(COMPPATH)g77
    LIBF=-lg2c -lcrypt -lpam -lpam_misc -ldl
endif

MBDYN_VERSION=00.001.0010
THISDIR=mbdyn-devel
BASE=$(HOME)/MBDyn/Devel/$(THISDIR)
MYLIBPATH=$(BASE)/lib
MYFLIBPATH=$(MYLIBPATH)/f
SRCDIR=$(BASE)/src
ARCHIVENAME=mbdyn-$(MBDYN_VERSION).tar.gz
THIS=$(BASE)
ARCH=$(HOME)/Archive
DOCDIR=$(BASE)/docs


### Librerie, flags ecc. 
ifeq ($(ACTIVECONFIG),debug)
	MYLIBS=-L$(MYLIBPATH)/debug/ -l$(MYLIB) -l$(MYMATH)
else
	MYLIBS=-L$(MYLIBPATH)/release/ -l$(MYLIB) -l$(MYMATH)
endif

ifeq ($(USE_LAPACK),YES)
  LAPACKLIBS=-L/usr/local/lib -llapack -lblas #-ltmglib
  USE_LAPACKFLAG=-DUSE_LAPACK
else
  LAPACKLIBS=
  USE_LAPACKFLAG=
endif

ifeq ($(USE_MPI),YES)
  MPIDIR=/usr/share/mpi
  #USE_MPIFLAG=-DUSE_MPI
  #MPI_INCLUDE=-I$(MPIDIR)/include/ -I$(MPIDIR)/include/c++
  #MPI_LIBS=-L$(MPIDIR)/lib -lmpich++ -lmpich -lnsl
  #MPIDIR=$(HOME)/Math/mpich-1.2/
  USE_MPIFLAG=-DUSE_MPI
  MPI_INCLUDE=-I$(MPIDIR)/include/ -I$(MPIDIR)/include/c++
  MPI_LIBS=-L$(MPIDIR)/lib -lmpich++ -lmpich -lnsl
else
  MPI_LIBS=
  USE_MPIFLAG=
  MPI_INCLUDE=
endif

ifeq ($(JUMPSHOTLOG),YES)
  JUMPSHOT_FLAG = -DMPI_PROFILING
  JUMPSHOT_INCL = -I$(HOME)/mpich/mpe 
  JUMPSHOT_LIBS = -lmpe -lm -lpmpich
else
  JUMPSHOT_FLAG = 
  JUMPSHOT_INCL = 
  JUMPSHOT_LIBS =
endif

ifeq ($(USE_METIS),YES)
  METISDIR = $(HOME)/Math/metis-4.0
  USE_METISFLAG = -DUSE_METIS -DSCHUR
  METIS_INCLUDE = -I$(METISDIR)/Lib
  METIS_LIBS    = -L$(METISDIR)/Lib -L$(METISDIR) -lmetis -lm
else
  USE_METISFLAG =	
  METIS_INCLUDE =
  METIS_LIBS    =
endif

ifeq ($(USE_MESCHACH),YES)
  MESCHACHBDIR=$(HOME)/Math/Meschach
  #MESCHACHBDIR=/users_2/masarati/Math/Meschach/
  MESCHACHLIBS=-L$(MESCHACHBDIR)/meschach -lmeschach
  MESCHACHINCL=-I$(MESCHACHBDIR)
  USE_MESCHACHFLAG=-DUSE_MESCHACH
else
  MESCHACHLIBS=
  MESCHACHINCL=
  USE_MESCHACHFLAG=
endif

LIBS=$(LAPACKLIBS) $(MYLIBS) $(MESCHACHLIBS) $(MPI_LIBS) $(JUMPSHOT_LIBS) \
     $(METIS_LIBS) $(LIBF) -ldl #-export-dynamic
INCLUDEPATH=-I$(MYLIBPATH)/include -I$(SRCDIR) $(MESCHACHINCL) $(MPI_INCLUDE) \
            $(JUMPSHOT_INCL) $(METIS_INCLUDE)
WALLFLAGS=
DEBUGFLAGS=-ggdb -DDEBUG -DDEBUG_COUT -DDEBUG_STOP -DHYDR_DEVEL # -Wall -W
DEBUGMEMMANFLAGS=$(DEBUGFLAGS) -DDEBUG_MEMMANAGER
RELEASEFLAGS=-m486 -fomit-frame-pointer -O6\
             -funroll-loops -funroll-all-loops\
	     -finline-functions #-Wall
             
#-funroll-loops -funroll-all-loops -fmove-all-movables\
#-fschedule-insns -fexpensive-optimizations -fgcse\
#-frerun-loop-opt -frerun-cse-after-loop -finline-functions


CFLAGS_=$(INCLUDEPATH) $(MACHINE) $(USE_MPIFLAG) $(USE_LAPACKFLAG) \
        $(USE_MESCHACHFLAG) -DUNIX_FILE $(WHAT_USE) \
	$(WALLFLAGS) '-DMBDYN_VERSION="$(MBDYN_VERSION)"' \
	$(LOCALCPPFLAGS) $(JUMPSHOT_FLAG) $(USE_METISFLAG) \
	-DUSE_SOCKET_DRIVES
CXXFLAGS_=$(CFLAGS) $(SPECCXXFLAGS) -DUSE_TABLE -DHAVE_ISOPEN \
          -DAEROD_OUTPUT=0 -DUSE_GRAALLDAMPER \
	  $(LOCALCPPFLAGS)

ifeq ($(ACTIVECONFIG),release)
  CFLAGS=$(CFLAGS_) $(RELEASEFLAGS)
  CXXFLAGS=$(CXXFLAGS_) $(RELEASEFLAGS)
else
  ifeq ($(DEBUG_MPI),YES)
    CFLAGS=$(CFLAGS_) $(DEBUGFLAGS) -DDEBUG_MPI
    CXXFLAGS=$(CXXFLAGS_) $(DEBUGFLAGS) -DDEBUG_MPI
  else
    CFLAGS=$(CFLAGS_) $(DEBUGFLAGS)
    CXXFLAGS=$(CXXFLAGS_) $(DEBUGFLAGS)
  endif
endif

### Utilities considerate
CXX=$(COMPPATH)g++
CC=$(COMPPATH)gcc
AR=ar
RANLIB=ranlib

### Path dei vari tipi di files
vpath %.h  ../src
vpath %.h  $(MYLIBPATH)/include
vpath %.cc ../src
vpath %.cc $(MYLIBPATH)/src
vpath %.c  ../src
vpath %.f  ../src
vpath %.f $(MYFLIBPATH)

genericccobjs=auth.o \
              bulk.o \
	      dataman.o \
	      dataman2.o \
	      dataman3.o \
	      dataman4.o \
	      dataman5.o \
	      dofdrive.o \
	      dofman.o \
	      dofpgin.o \
	      drive.o \
	      drive_.o \
	      elem.o \
	      elman.o \
	      enums.o \
	      env.o \
	      filedrv.o \
	      force.o \
	      intmeth.o \
	      j2p.o \
	      loadable.o \
	      mbpar.o \
	      multistp.o \
	      node.o \
	      nodeman.o \
	      output.o \
              sockdrv.o \
	      tpldrive.o
	      
ifeq ($(USE_MPI),YES)
  genericmpiobjs=  schur.o \
		   schurdataman.o \
		   schsolman.o 
else
  genericmpiobjs= 
endif

genericfobjs=damper.o

structccobjs=accj.o \
             autostr.o \
	     beam.o \
	     body.o \
	     drvhinge.o \
	     drvj.o \
	     genj.o \
	     gravity.o \
	     inline.o \
	     inplanej.o \
	     joint.o \
	     kin.o \
	     kinj.o \
             modal.o \
	     planedj.o \
	     planej.o \
	     prismj.o \
	     pzbeam.o \
	     rodj.o \
	     spherj.o \
	     strnode.o \
	     univj.o \
	     vehj.o \
	     vehj2.o

elecccobjs=discctrl.o \
	   elec.o \
	   elecnode.o \
	   forgfact.o \
	   genel.o \
	   genfilt.o \
	   gpc.o \
	   id.o \
	   px.o \
	   swashpl.o
	   
hydrccobjs=actuator.o \
           hfluid.o \
	   hminor.o \
	   hutils.o \
           pipe.o \
           preselem.o \
	   valve.o

aeroccobjs=aerodata.o \
           aeroelem.o \
	   c81data.o \
	   rotor.o

aerocobjs=aerodc81.o

aerofobjs=aerod2.o



### Oggetti C++ di MBDyn
ccobjs=mbdyn.o \
       $(genericccobjs) $(structccobjs) $(aeroccobjs) $(elecccobjs) \
       $(hydrccobjs) $(genericmpiobjs)

### Oggetti FORTRAN di MBDyn
fobjs=$(genericfobjs) $(aerofobjs)

### Oggetti C di Mbdyn
cobjs=$(aerocobjs)

### Collezione degli oggetti di Mbdyn
genericobjs=$(genericccobjs) $(genericfobjs) $(genericmpiobjs)
structobjs=$(structccobjs)
aeroobjs=$(aeroccobjs) $(aerocobjs) $(aerofobjs)
elecobjs=$(elecccobjs)
hydrobjs=$(hydrccobjs)

### Che cosa usare
ifeq ($(TARGETTYPE),bare)
  WHAT_USE=
  objs=mbdyn.o libgenericobjs.a
  libobjs=-lgenericobjs
endif
ifeq ($(TARGETTYPE),mechanic)
  WHAT_USE=-DUSE_STRUCT_NODES 
  objs=libgenericobjs.a libstructobjs.a
  libobjs=-lgenericobjs -lstructobjs
endif
ifeq ($(TARGETTYPE),electric) 
  WHAT_USE=-DUSE_ELECTRIC_NODES 
  objs=libgenericobjs.a libelecobjs.a
  libobjs=-lgenericobjs -lelecobjs.a
endif
ifeq ($(TARGETTYPE),hydraulic)
  WHAT_USE=-DUSE_HYDRAULIC_NODES 
  objs=libgenericobjs.a libhydrobjs.a
  libobjs=-lgenericobjs -lhydrobjs
endif
ifeq ($(TARGETTYPE),aeroelastic)
  WHAT_USE=-DUSE_STRUCT_NODES -DUSE_AERODYNAMIC_ELEMS
  objs=libgenericobjs.a libstructobjs.a libaeroobjs.a
  libobjs=-lgenericobjs -lstructobjs -laeroobjs
endif
ifeq ($(TARGETTYPE),electromechanic)
  WHAT_USE=-DUSE_STRUCT_NODES -DUSE_ELECTRIC_NODES
  objs=libgenericobjs.a libstructobjs.a libelecobjs.a
  libobjs=-lgenericobjs -lstructobjs -lelecobjs  
endif
ifeq ($(TARGETTYPE),hydromechanic)
  WHAT_USE=-DUSE_STRUCT_NODES -DUSE_HYDRAULIC_NODES
  objs=libgenericobjs.a libstructobjs.a libhydrobjs.a
  libobjs=-lgenericobjs -lstructobjs -lhydrobjs
endif
ifeq ($(TARGETTYPE),electrohydraulic)
  WHAT_USE=-DUSE_ELECTRIC_NODES -DUSE_HYDRAULIC_NODES
  objs=libgenericobjs.a libelecobjs.a libhydrobjs.a
  libobjs=-lgenericobjs -lelecobjs -lhydrobjs
endif
ifeq ($(TARGETTYPE),aeroelectroelastic)
  WHAT_USE=-DUSE_STRUCT_NODES -DUSE_AERODYNAMIC_ELEMS -DUSE_ELECTRIC_NODES
  objs=libgenericobjs.a libstructobjs.a libelecobjs.a libaeroobjs.a
  libobjs=-lgenericobjs -lstructobjs -lelecobjs -laeroobjs
endif  
ifeq ($(TARGETTYPE),aeroservoelastic) 
  WHAT_USE=-DUSE_STRUCT_NODES -DUSE_AERODYNAMIC_ELEMS -DUSE_ELECTRIC_NODES \
           -DUSE_HYDRAULIC_NODES
  objs=libgenericobjs.a libstructobjs.a libelecobjs.a libhydrobjs.a \
         libaeroobjs.a
  libobjs=-lgenericobjs -lstructobjs -lelecobjs -lhydrobjs \
          -laeroobjs
endif  


.PHONY : mbdyn

mbdyn :
	@cd $(ACTIVECONFIG); \
	if (test -f Makefile) ; then \
	    $(MAKE) $(TARGETNAME) ; \
	else \
	    echo "make depend first!" ; \
	fi


### Target di default: `mbdyn.<Active-configuration>' 
ifeq ($(ACTIVECONFIG),release)
  TARGETNAME=$(TARGET).release.$(TARGETTYPE)
  MYLIBLIBPATH=$(MYLIBPATH)/release

  $(TARGETNAME) : mbdyn.o $(objs) \
                  $(MYLIBLIBPATH)/$(LIBMYLIB) $(MYLIBLIBPATH)/$(LIBMYMATH)
	@echo "release!"
	$(CXX) -o $(TARGETNAME) $(CXXFLAGS) -L. mbdyn.o $(libobjs) $(LIBS)
	# strip $(TARGETNAME)
	size $(TARGETNAME)

else
  TARGETNAME=$(TARGET).debug.$(TARGETTYPE)
  MYLIBLIBPATH=$(MYLIBPATH)/debug

  $(TARGETNAME) : mbdyn.o $(objs) \
                  $(MYLIBLIBPATH)/$(LIBMYLIB) $(MYLIBLIBPATH)/$(LIBMYMATH)
	@echo "debug!"
	$(CXX) -o $(TARGETNAME) $(CXXFLAGS) -L. mbdyn.o $(libobjs) $(LIBS)
	size $(TARGETNAME)
endif


### settare a yes se si vuole ricompilare il precompilato
MAKE_GENERIC=YES
MAKE_STRUCT=YES
MAKE_ELEC=YES
MAKE_HYDR=YES
MAKE_AERO=YES
MAKE_LIBS=YES

### blocchi precompilati
ifeq ($(MAKE_GENERIC),YES)
    libgenericobjs.a : $(genericobjs)
	$(AR) -ru libgenericobjs.a $?
	$(RANLIB) libgenericobjs.a
endif

ifeq ($(MAKE_STRUCT),YES)
    libstructobjs.a : $(structobjs)
	  $(AR) -ru libstructobjs.a $?
	  $(RANLIB) libstructobjs.a
endif

ifeq ($(MAKE_ELEC),YES)
    libelecobjs.a : $(elecobjs)
	  $(AR) -ru libelecobjs.a $?
	  $(RANLIB) libelecobjs.a
endif

ifeq ($(MAKE_HYDR),YES)
    libhydrobjs.a : $(hydrobjs)
	  $(AR) -ru libhydrobjs.a $?
	  $(RANLIB) libhydrobjs.a
endif

ifeq ($(MAKE_AERO),YES)
    libaeroobjs.a : $(aeroobjs)
	  $(AR) -ru libaeroobjs.a $?
	  $(RANLIB) libaeroobjs.a
endif

### Rules per libreria `libmylib.a'
mylibccobjs=myassert.o mynewmem.o \
            fn_UNIX.o \
	    input.o table.o mathp.o parser.o parsinc.o \
	    gauss.o \
	    llstack.o llist.o

mylibcobjs=

mylibfobjs=

mylibobjs=$(mylibccobjs) $(mylibcobjs) $(mylibfobjs)


myl : $(MYLIBLIBPATH)/$(LIBMYLIB)

ifeq ($(MAKE_LIBS),YES)
    $(MYLIBLIBPATH)/$(LIBMYLIB) : $(mylibobjs)
	  $(AR) -ru $(MYLIBLIBPATH)/$(LIBMYLIB) $?
	  $(RANLIB) $(MYLIBLIBPATH)/$(LIBMYLIB)
endif


### Rules per libreria `libmymath.a'
mymathccobjs=solman.o harwrap.o \
	     fullmh.o submat.o \
	     mschwrap.o \
	     matvec3.o matvec6.o matvec3n.o \
	     harwout_.o

mymathcobjs=harwout.o

mymathfobjs=harwlib_.o ldl.o

mymathobjs=$(mymathccobjs) $(mymathcobjs) $(mymathfobjs) 



mymth : $(MYLIBLIBPATH)/$(LIBMYMATH)

ifeq ($(MAKE_LIBS),YES)
    $(MYLIBLIBPATH)/$(LIBMYMATH) : $(mymathobjs)
	$(AR) -ru $(MYLIBLIBPATH)/$(LIBMYMATH) $?	 
	$(RANLIB) $(MYLIBLIBPATH)/$(LIBMYMATH)
endif


.PHONY : utils modules

utils :
	@cd utils; \
	if (test -f Makefile) ; then \
	    $(MAKE) ; \
	else \
	    echo "make depend first!" ; \
	fi


MODULEFLAGS=$(CXXFLAGS) -L../../$(ACTIVECONFIG) $(libobjs) $(LIBS) -shared
modules : 
	@cd modules ; \
	for X in module-* ; do \
	    cd $$X ; \
	    echo "making module" $$X ; \
	    if (test -f Makefile) ; then \
	        $(MAKE) ; \
	    fi ; \
	    cd .. ; \
	done


### Rules per files C, C++, FORTRAN
$(ccobjs) $(mylibccobjs) $(mymathccobjs) : %.o : %.cc
	$(CXX) $(CXXFLAGS) -o $@ -c $<

$(cobjs) $(mylibcobjs) $(mymathcobjs) : %.o : %.c
	$(CC) $(CFLAGS) -o $@ -c $<

$(fobjs) $(mylibfobjs) $(mymathfobjs): %.o : %.f
	$(FC) $(FFLAGS) -o $@ -c $<



### Elenco dei files richiesti da Mbdyn (usato per backup e tar)
INCL=auth.h \
     accj.h \
     actuator.h \
     aerod2.h \
     aerodyn.h \
     aeroelem.h \
     autostr.h \
     beam.h \
     body.h \
     bulk.h \
     constltp.h \
     constltp_.h \
     dataman.h \
     dataman_.h \
     $(MYLIBPATH)/include/destr.h \
     discctrl.h \
     dofdrive.h \
     dofown.h \
     dofpgin.h \
     drive.h \
     drive_.h \
     driven.h \
     drvhinge.h \
     drvj.h \
     elec.h \
     elecnode.h \
     elem.h \
     $(MYLIBPATH)/include/except.h \
     filedrv.h \
     $(MYLIBPATH)/include/filename.h \
     force.h \
     forgfact.h \
     fullmh.h \
     gauss.h \
     genel.h \
     genel_.h \
     genfilt.h \
     genj.h \
     gpc.h \
     gravity.h \
     $(MYLIBPATH)/include/handle.h \
     harwlib.h \
     harwrap.h \
     hfluid.h \
     hminor.h \
     hutils.h \
     id.h \
     inline.h \
     inplanej.h \
     inplcntj.h \
     input.h \
     intmeth.h \
     integr.h \
     j2p.h \
     joint.h \
     kin.h \
     kinj.h \
     $(MYLIBPATH)/include/ldl.h \
     llist.h \
     llstack.h \
     loadable.h \
     mathp.h \
     mathpar.h \
     mathtyp.h \
     matvec3.h \
     matvec3n.h \
     matvec6.h \
     mbdyn.h \
     mbpar.h \
     memmans.h \
     modal.h \
     mschwrap.h \
     multistp.h \
     mysleep.h \
     $(MYLIBPATH)/include/myassert.h \
     $(MYLIBPATH)/include/mynewmem.h \
     $(MYLIBPATH)/include/myf2c.h \
     $(MYLIBPATH)/include/mystddef.h \
     node.h \
     output.h \
     parser.h \
     parsinc.h \
     planedj.h \
     planej.h \
     preselem.h \
     presnode.h \
     prismj.h \
     px.h \
     pzbeam.h \
     readclaw.h \
     reffrm.h \
     restart.h \
     rodj.h \
     rotor.h \
     rottrim.h \
     search.h \
     schur.h \
     schsolman.h \
     schurdataman.h \
     shape.h \
     sockdrv.h \
     solman.h \
     spherj.h \
     stack.h \
     strnode.h \
     submat.h \
     swashpl.h \
     table.h \
     tpldrive.h \
     univj.h \
     vec3drv.h \
     veciter.h \
     vehj.h \
     vehj2.h \
     withlab.h 

SRCS=accj.cc \
     actuator.cc \
     aeroelem.cc \
     auth.cc \
     autostr.cc \
     beam.cc \
     body.cc \
     bulk.cc \
     dataman.cc \
     dataman2.cc \
     dataman3.cc \
     dataman4.cc \
     dataman5.cc \
     discctrl.cc \
     dofdrive.cc \
     dofman.cc \
     dofpgin.cc \
     drive.cc \
     drive_.cc \
     drvhinge.cc \
     drvj.cc \
     elec.cc \
     elecnode.cc \
     elem.cc \
     elman.cc \
     enums.cc \
     env.cc \
     filedrv.cc \
     $(MYLIBPATH)/src/fn_UNIX.cc \
     force.cc \
     forgfact.cc \
     fullmh.cc \
     gauss.cc \
     genel.cc \
     genfilt.cc \
     genj.cc \
     gpc.cc \
     gravity.cc \
     harwout.c \
     harwout_.cc \
     harwrap.cc \
     hfluid.cc \
     hminor.cc \
     hutils.cc \
     id.cc \
     inline.cc \
     inplanej.cc \
     input.cc \
     intmeth.cc \
     j2p.cc \
     joint.cc \
     kin.cc \
     kinj.cc \
     llist.cc \
     llstack.cc \
     loadable.cc \
     mathp.cc \
     matvec3.cc \
     matvec3n.cc \
     matvec6.cc \
     mbdyn.cc \
     mbpar.cc \
     modal.cc \
     mschwrap.cc \
     multistp.cc \
     $(MYLIBPATH)/src/myassert.cc \
     $(MYLIBPATH)/src/mynewmem.cc \
     node.cc \
     nodeman.cc \
     output.cc \
     parser.cc \
     parsinc.cc \
     pipe.cc \
     planedj.cc \
     planej.cc \
     preselem.cc \
     prismj.cc \
     px.cc \
     pzbeam.cc \
     rodj.cc \
     rotor.cc \
     schur.cc \
     schsolman.cc \
     schurdataman.cc \
     search.cc \
     sockdrv.cc \
     solman.cc \
     spherj.cc \
     strnode.cc \
     submat.cc \
     swashpl.cc \
     table.cc \
     tpldrive.cc \
     univj.cc \
     valve.cc \
     vehj.cc \
     vehj2.cc

BACKUP=$(INCL) $(SRCS) Makefile README CHANGELOG TODO \
       Utils/Makefile Utils/*.[hc]*

.PHONY : depend modules-depend dependall

### Crea le dipendenze
dependall : depend modules-depend

depend :
	cp Makefile src/ ; \
	cd src ; \
	makedepend -- -c $(CXXFLAGS) -- $(SRCS) ; \
	rm -f Makefile.bak ; \
	mv Makefile ../$(ACTIVECONFIG)
	cd utils; \
	cp Makefile.template Makefile ; \
	$(MAKE) depend

modules-depend :
	@cd modules ; \
	for X in module-* ; do \
	    cd $$X ; \
	    echo "finding dependencies of module" $$X ; \
	    if (test -f Makefile.template) ; then \
	        cp Makefile.template Makefile; \
	        $(MAKE) module-depend ; \
	    fi ; \
	    cd .. ; \
	done


### Cancella gli obj files
.PHONY : clean veryclean cleanlib cleanall cleanutils \
         cleandocs cleanman cleanhtml cleaninfo \
         modules-clean modules-veryclean

clean :
	cd $(ACTIVECONFIG); rm -f $(ccobjs) $(cobjs) $(fobjs)       

veryclean : clean modules-veryclean
	cd $(ACTIVECONFIG); rm -f $(TARGET).$(ACTIVECONFIG).* Makefile*
	cd src; rm -rf Makefile* *~

cleanlib : 
	cd $(ACTIVECONFIG); rm -f *.a $(mylibobjs) $(mymathobjs)
	cd $(MYLIBPATH)/$(ACTIVECONFIG); rm -f *.a

# $(MYLIBLIBPATH)/$(LIBMYMATH) $(MYLIBLIBPATH)/$(LIBMYLIB)

cleanutils : 
	cd utils; $(MAKE) clean


cleaninfo : cleandocs cleanman cleanhtml

cleandocs:
	rm -rf docs/*

cleanman:
	cd manual ; \
	rm -f *.aux *.dvi *.log *.ps *.toc *~

cleanhtml:
	cd manual ; \
	rm -rf input


cleanall : veryclean cleanlib cleanutils cleandocs
	rm -f *~

modules-clean :
	@cd modules ; \
	for X in module-* ; do \
	    cd $$X ; \
	    echo "cleaning module" $$X ; \
	    if (test -f Makefile) ; then \
	        $(MAKE) module-clean ; \
	    else \
	        rm -f *.so *.o ; \
	    fi ; \
	    cd .. ; \
	done

modules-veryclean :
	@cd modules ; \
	for X in module-* ; do \
	    cd $$X ; \
	    echo "cleaning module" $$X ; \
	    if (test -f Makefile) ; then \
	        $(MAKE) module-veryclean ; \
	    else \
	        rm -f *.so Makefile ; \
	    fi ; \
	    cd .. ; \
	done



.PHONY : archive

# Crea l'archivio
archive :
	THISDIR=`pwd` ; \
	cd .. ; \
	tar czvf $(ARCHIVENAME) \
	         $(THISDIR)/src/* \
		 $(THISDIR)/utils/*.[cfh]* \
		 $(THISDIR)/utils/Makefile.template \
		 $(THISDIR)/manual/*.tex \
		 $(THISDIR)/manual/*.eps \
	         $(THISDIR)/modules/Makefile* \
	         $(THISDIR)/modules/module-*/Makefile.template \
	         $(THISDIR)/modules/module-*/*.[chf]* \
		 $(THISDIR)/Makefile \
		 $(THISDIR)/Makefile.template $(THISDIR)/CHANGELOG \
		 $(THISDIR)/README $(THISDIR)/TODO


.PHONY: doc man html

# Crea la documentazione con doc++
doc :
	cd src ; \
	doc++ -p -d $(DOCDIR) -a -f main.dxx

man :
	@echo "making manual ..."
	@cd manual ; \
	latex input.tex | tee log ; \
	if (grep "Label(s) may have changed. Rerun to get cross-references right" log) ; then \
	    echo "rerunning latex to get cross references right" ; \
	    latex input.tex ; \
	fi ; \
	rm -f log; \
	dvips -o input.ps input.dvi

html : cleanhtml
	cd manual ; \
	latex2html input.tex


# DO NOT DELETE

